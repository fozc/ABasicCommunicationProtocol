

Microchip Technology PIC18 STD Macro Assembler V1.36 build -262312587 
                                                                                               Wed Feb 01 11:31:06 2017

Microchip Technology Omniscient Code Generator v1.36 (Standard mode) build 201601150325
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	sm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    36                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           	psect	idataBANK0
    39  0017F0                     __pidataBANK0:
    40                           	opt stack 0
    41                           
    42                           ;initializer for send_info@F7963
    43  0017F0  49                 	db	73
    44  0017F1  4E                 	db	78
    45  0017F2  46                 	db	70
    46  0017F3  4F                 	db	79
    47  0017F4  3A                 	db	58
    48  0017F5  4D                 	db	77
    49  0017F6  63                 	db	99
    50  0017F7  75                 	db	117
    51  0017F8  3A                 	db	58
    52  0017F9  20                 	db	32
    53  0017FA  50                 	db	80
    54  0017FB  49                 	db	73
    55  0017FC  43                 	db	67
    56  0017FD  31                 	db	49
    57  0017FE  38                 	db	56
    58  0017FF  46                 	db	70
    59  001800  34                 	db	52
    60  001801  36                 	db	54
    61  001802  4B                 	db	75
    62  001803  32                 	db	50
    63  001804  32                 	db	50
    64  001805  20                 	db	32
    65  001806  43                 	db	67
    66  001807  6F                 	db	111
    67  001808  6D                 	db	109
    68  001809  70                 	db	112
    69  00180A  69                 	db	105
    70  00180B  6C                 	db	108
    71  00180C  65                 	db	101
    72  00180D  72                 	db	114
    73  00180E  3A                 	db	58
    74  00180F  20                 	db	32
    75  001810  58                 	db	88
    76  001811  43                 	db	67
    77  001812  38                 	db	56
    78  001813  0D                 	db	13
    79  001814  0A                 	db	10
    80  001815  00                 	db	0
    81                           
    82                           	psect	smallconst
    83  001000                     __psmallconst:
    84                           	opt stack 0
    85  001000  00                 	db	0
    86  001001                     _a:
    87                           	opt stack 0
    88  001001  42                 	db	66
    89  001002  69                 	db	105
    90  001003  72                 	db	114
    91  001004  69                 	db	105
    92  001005  6E                 	db	110
    93  001006  63                 	db	99
    94  001007  69                 	db	105
    95  001008  20                 	db	32
    96  001009  63                 	db	99
    97  00100A  69                 	db	105
    98  00100B  68                 	db	104
    99  00100C  61                 	db	97
   100  00100D  7A                 	db	122
   101  00100E  0D                 	db	13
   102  00100F  0A                 	db	10
   103  001010  00                 	db	0
   104  001011                     __end_of_a:
   105                           	opt stack 0
   106  001011                     serial_rx_process@F7956:
   107                           	opt stack 0
   108  001011  4C                 	db	76
   109  001012  45                 	db	69
   110  001013  44                 	db	68
   111  001014  31                 	db	49
   112  001015  5F                 	db	95
   113  001016  4F                 	db	79
   114  001017  46                 	db	70
   115  001018  46                 	db	70
   116  001019  00                 	db	0
   117  00101A                     __end_ofserial_rx_process@F7956:
   118                           	opt stack 0
   119  00101A                     serial_rx_process@F7958:
   120                           	opt stack 0
   121  00101A  47                 	db	71
   122  00101B  45                 	db	69
   123  00101C  54                 	db	84
   124  00101D  5F                 	db	95
   125  00101E  49                 	db	73
   126  00101F  4E                 	db	78
   127  001020  46                 	db	70
   128  001021  4F                 	db	79
   129  001022  00                 	db	0
   130  001023                     __end_ofserial_rx_process@F7958:
   131                           	opt stack 0
   132  001023                     _hexpowers:
   133                           	opt stack 0
   134  001023  0001               	dw	1
   135  001025  0010               	dw	16
   136  001027  0100               	dw	256
   137  001029  1000               	dw	4096
   138  00102B                     __end_of_hexpowers:
   139                           	opt stack 0
   140  00102B                     serial_rx_process@F7954:
   141                           	opt stack 0
   142  00102B  4C                 	db	76
   143  00102C  45                 	db	69
   144  00102D  44                 	db	68
   145  00102E  31                 	db	49
   146  00102F  5F                 	db	95
   147  001030  4F                 	db	79
   148  001031  4E                 	db	78
   149  001032  00                 	db	0
   150  001033                     __end_ofserial_rx_process@F7954:
   151                           	opt stack 0
   152  0000                     _ANSELB	set	3897
   153  0000                     _ANSELC	set	3898
   154  0000                     _BAUDCON1bits	set	4024
   155  0000                     _INTCONbits	set	4082
   156  0000                     _PIE1bits	set	3997
   157  0000                     _RCONbits	set	4048
   158  0000                     _RCREG	set	4014
   159  0000                     _RCREG1	set	4014
   160  0000                     _RCSTAbits	set	4011
   161  0000                     _SPBRG	set	4015
   162  0000                     _SPBRGH1	set	4016
   163  0000                     _TRISB	set	3987
   164  0000                     _TRISC	set	3988
   165  0000                     _TX1REG	set	4013
   166  0000                     _TXREG	set	4013
   167  0000                     _TXSTA1bits	set	4012
   168  0000                     _TXSTAbits	set	4012
   169  0000                     _LATB0	set	31824
   170  0000                     _LATB1	set	31825
   171  0000                     _RC1IF	set	31989
   172  0000                     _RCIF	set	31989
   173  0000                     _TRISC6	set	31910
   174  0000                     _TRISC7	set	31911
   175  0000                     _TXIF	set	31988
   176  001033                     STR_5:
   177  001033  7C                 	db	124
   178  001034  2D                 	db	45
   179  001035  2D                 	db	45
   180  001036  2D                 	db	45
   181  001037  2D                 	db	45
   182  001038  2D                 	db	45
   183  001039  2D                 	db	45
   184  00103A  2D                 	db	45
   185  00103B  2D                 	db	45
   186  00103C  2D                 	db	45
   187  00103D  2D                 	db	45
   188  00103E  2D                 	db	45
   189  00103F  2D                 	db	45
   190  001040  2D                 	db	45
   191  001041  2D                 	db	45
   192  001042  2D                 	db	45
   193  001043  2D                 	db	45
   194  001044  2D                 	db	45
   195  001045  2D                 	db	45
   196  001046  2D                 	db	45
   197  001047  2D                 	db	45
   198  001048  2D                 	db	45
   199  001049  2D                 	db	45
   200  00104A  2D                 	db	45
   201  00104B  2D                 	db	45
   202  00104C  2D                 	db	45
   203  00104D  2D                 	db	45
   204  00104E  7C                 	db	124
   205  00104F  0D                 	db	13
   206  001050  0A                 	db	10
   207  001051  00                 	db	0
   208  001052                     STR_6:
   209  001052  41                 	db	65	;'A'
   210  001053  6C                 	db	108	;'l'
   211  001054  69                 	db	105	;'i'
   212  001055  6E                 	db	110	;'n'
   213  001056  61                 	db	97	;'a'
   214  001057  6E                 	db	110	;'n'
   215  001058  20                 	db	32
   216  001059  44                 	db	68	;'D'
   217  00105A  61                 	db	97	;'a'
   218  00105B  74                 	db	116	;'t'
   219  00105C  61                 	db	97	;'a'
   220  00105D  3A                 	db	58	;':'
   221  00105E  20                 	db	32
   222  00105F  25                 	db	37
   223  001060  73                 	db	115	;'s'
   224  001061  20                 	db	32
   225  001062  42                 	db	66	;'B'
   226  001063  43                 	db	67	;'C'
   227  001064  43                 	db	67	;'C'
   228  001065  3A                 	db	58	;':'
   229  001066  20                 	db	32
   230  001067  25                 	db	37
   231  001068  78                 	db	120	;'x'
   232  001069  0D                 	db	13
   233  00106A  0A                 	db	10
   234  00106B  00                 	db	0
   235  00106C                     STR_1:
   236  00106C  7C                 	db	124
   237  00106D  2D                 	db	45
   238  00106E  2D                 	db	45
   239  00106F  2D                 	db	45
   240  001070  4E                 	db	78	;'N'
   241  001071  6F                 	db	111	;'o'
   242  001072  64                 	db	100	;'d'
   243  001073  65                 	db	101	;'e'
   244  001074  5F                 	db	95	;'_'
   245  001075  31                 	db	49	;'1'
   246  001076  20                 	db	32
   247  001077  53                 	db	83	;'S'
   248  001078  74                 	db	116	;'t'
   249  001079  61                 	db	97	;'a'
   250  00107A  72                 	db	114	;'r'
   251  00107B  74                 	db	116	;'t'
   252  00107C  65                 	db	101	;'e'
   253  00107D  64                 	db	100	;'d'
   254  00107E  2D                 	db	45
   255  00107F  2D                 	db	45
   256  001080  2D                 	db	45
   257  001081  7C                 	db	124
   258  001082  0D                 	db	13
   259  001083  0A                 	db	10
   260  001084  00                 	db	0
   261  001085                     STR_10:
   262  001085  30                 	db	48	;'0'
   263  001086  31                 	db	49	;'1'
   264  001087  32                 	db	50	;'2'
   265  001088  33                 	db	51	;'3'
   266  001089  34                 	db	52	;'4'
   267  00108A  35                 	db	53	;'5'
   268  00108B  36                 	db	54	;'6'
   269  00108C  37                 	db	55	;'7'
   270  00108D  38                 	db	56	;'8'
   271  00108E  39                 	db	57	;'9'
   272  00108F  61                 	db	97	;'a'
   273  001090  62                 	db	98	;'b'
   274  001091  63                 	db	99	;'c'
   275  001092  64                 	db	100	;'d'
   276  001093  65                 	db	101	;'e'
   277  001094  66                 	db	102	;'f'
   278  001095  00                 	db	0
   279  001096                     STR_2:
   280  001096  48                 	db	72	;'H'
   281  001097  65                 	db	101	;'e'
   282  001098  73                 	db	115	;'s'
   283  001099  70                 	db	112	;'p'
   284  00109A  2E                 	db	46
   285  00109B  20                 	db	32
   286  00109C  42                 	db	66	;'B'
   287  00109D  43                 	db	67	;'C'
   288  00109E  43                 	db	67	;'C'
   289  00109F  3A                 	db	58	;':'
   290  0010A0  20                 	db	32
   291  0010A1  25                 	db	37
   292  0010A2  78                 	db	120	;'x'
   293  0010A3  20                 	db	32
   294  0010A4  00                 	db	0
   295  0010A5                     STR_8:
   296  0010A5  4C                 	db	76	;'L'
   297  0010A6  45                 	db	69	;'E'
   298  0010A7  44                 	db	68	;'D'
   299  0010A8  31                 	db	49	;'1'
   300  0010A9  5F                 	db	95	;'_'
   301  0010AA  4F                 	db	79	;'O'
   302  0010AB  46                 	db	70	;'F'
   303  0010AC  46                 	db	70	;'F'
   304  0010AD  0D                 	db	13
   305  0010AE  0A                 	db	10
   306  0010AF  00                 	db	0
   307  0010B0                     STR_7:
   308  0010B0  4C                 	db	76	;'L'
   309  0010B1  45                 	db	69	;'E'
   310  0010B2  44                 	db	68	;'D'
   311  0010B3  31                 	db	49	;'1'
   312  0010B4  5F                 	db	95	;'_'
   313  0010B5  4F                 	db	79	;'O'
   314  0010B6  4E                 	db	78	;'N'
   315  0010B7  0D                 	db	13
   316  0010B8  0A                 	db	10
   317  0010B9  00                 	db	0
   318  0010BA                     STR_3:
   319  0010BA  20                 	db	32
   320  0010BB  45                 	db	69	;'E'
   321  0010BC  52                 	db	82	;'R'
   322  0010BD  52                 	db	82	;'R'
   323  0010BE  2E                 	db	46
   324  0010BF  0D                 	db	13
   325  0010C0  0A                 	db	10
   326  0010C1  00                 	db	0
   327  0010C2                     STR_9:
   328  0010C2  28                 	db	40
   329  0010C3  6E                 	db	110	;'n'
   330  0010C4  75                 	db	117	;'u'
   331  0010C5  6C                 	db	108	;'l'
   332  0010C6  6C                 	db	108	;'l'
   333  0010C7  29                 	db	41
   334  0010C8  00                 	db	0
   335  0010C9                     STR_4:
   336  0010C9  20                 	db	32
   337  0010CA  4F                 	db	79	;'O'
   338  0010CB  4B                 	db	75	;'K'
   339  0010CC  2E                 	db	46
   340  0010CD  0D                 	db	13
   341  0010CE  0A                 	db	10
   342  0010CF  00                 	db	0
   343                           
   344                           ; #config settings
   345  0010D0  00                 	db	0	; dummy byte at the end
   346  0000                     
   347                           	psect	cinit
   348  001736                     __pcinit:
   349                           	opt stack 0
   350  001736                     start_initialization:
   351                           	opt stack 0
   352  001736                     __initialization:
   353                           	opt stack 0
   354                           
   355                           ; Clear objects allocated to BANK1 (131 bytes)
   356  001736  EE01  F000         	lfsr	0,__pbssBANK1
   357  00173A  0E83               	movlw	131
   358  00173C                     clear_0:
   359  00173C  6AEE               	clrf	postinc0,c
   360  00173E  06E8               	decf	wreg,f,c
   361  001740  E1FD               	bnz	clear_0
   362                           
   363                           ; Initialize objects allocated to BANK0 (38 bytes)
   364                           ; load TBLPTR registers with __pidataBANK0
   365  001742  0EF0               	movlw	low __pidataBANK0
   366  001744  6EF6               	movwf	tblptrl,c
   367  001746  0E17               	movlw	high __pidataBANK0
   368  001748  6EF7               	movwf	tblptrh,c
   369  00174A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   370  00174C  6EF8               	movwf	tblptru,c
   371  00174E  EE00  F060         	lfsr	0,__pdataBANK0
   372  001752  EE10 F026          	lfsr	1,38
   373  001756                     copy_data0:
   374  001756  0009               	tblrd		*+
   375  001758  CFF5 FFEE          	movff	tablat,postinc0
   376  00175C  50E5               	movf	postdec1,w,c
   377  00175E  50E1               	movf	fsr1l,w,c
   378  001760  E1FA               	bnz	copy_data0
   379  001762                     end_of_initialization:
   380                           	opt stack 0
   381  001762                     __end_of__initialization:
   382                           	opt stack 0
   383  001762  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   384  001764  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   385  001766  0100               	movlb	0
   386  001768  EFB6  F00B         	goto	_main	;jump to C main() function
   387                           tblptru	equ	0xFF8
   388                           tblptrh	equ	0xFF7
   389                           tblptrl	equ	0xFF6
   390                           tablat	equ	0xFF5
   391                           postinc0	equ	0xFEE
   392                           wreg	equ	0xFE8
   393                           postdec1	equ	0xFE5
   394                           fsr1l	equ	0xFE1
   395                           
   396                           	psect	dataBANK0
   397  000060                     __pdataBANK0:
   398                           	opt stack 0
   399  000060                     send_info@F7963:
   400                           	opt stack 0
   401  000060                     	ds	38
   402                           tblptru	equ	0xFF8
   403                           tblptrh	equ	0xFF7
   404                           tblptrl	equ	0xFF6
   405                           tablat	equ	0xFF5
   406                           postinc0	equ	0xFEE
   407                           wreg	equ	0xFE8
   408                           postdec1	equ	0xFE5
   409                           fsr1l	equ	0xFE1
   410                           
   411                           	psect	bssBANK1
   412  000100                     __pbssBANK1:
   413                           	opt stack 0
   414  000100                     _serial:
   415                           	opt stack 0
   416  000100                     	ds	131
   417                           tblptru	equ	0xFF8
   418                           tblptrh	equ	0xFF7
   419                           tblptrl	equ	0xFF6
   420                           tablat	equ	0xFF5
   421                           postinc0	equ	0xFEE
   422                           wreg	equ	0xFE8
   423                           postdec1	equ	0xFE5
   424                           fsr1l	equ	0xFE1
   425                           
   426                           	psect	cstackBANK0
   427  000086                     __pcstackBANK0:
   428                           	opt stack 0
   429  000086                     ??_serial_rx_process:
   430                           
   431                           ; 1 bytes @ 0x0
   432  000086                     	ds	5
   433  00008B                     serial_rx_process@led1_off:
   434                           	opt stack 0
   435                           
   436                           ; 9 bytes @ 0x5
   437  00008B                     	ds	9
   438  000094                     serial_rx_process@get_info:
   439                           	opt stack 0
   440                           
   441                           ; 9 bytes @ 0xE
   442  000094                     	ds	9
   443  00009D                     serial_rx_process@led1_on:
   444                           	opt stack 0
   445                           
   446                           ; 8 bytes @ 0x17
   447  00009D                     	ds	8
   448                           tblptru	equ	0xFF8
   449                           tblptrh	equ	0xFF7
   450                           tblptrl	equ	0xFF6
   451                           tablat	equ	0xFF5
   452                           postinc0	equ	0xFEE
   453                           wreg	equ	0xFE8
   454                           postdec1	equ	0xFE5
   455                           fsr1l	equ	0xFE1
   456                           
   457                           	psect	cstackCOMRAM
   458  000001                     __pcstackCOMRAM:
   459                           	opt stack 0
   460  000001                     i2memset@p1:
   461                           	opt stack 0
   462                           
   463                           ; 2 bytes @ 0x0
   464  000001                     	ds	2
   465  000003                     i2memset@c:
   466                           	opt stack 0
   467                           
   468                           ; 2 bytes @ 0x2
   469  000003                     	ds	2
   470  000005                     i2memset@n:
   471                           	opt stack 0
   472                           
   473                           ; 2 bytes @ 0x4
   474  000005                     	ds	2
   475  000007                     i2memset@p:
   476                           	opt stack 0
   477                           
   478                           ; 2 bytes @ 0x6
   479  000007                     	ds	2
   480  000009                     serial_interrupt_handler@data:
   481                           	opt stack 0
   482                           
   483                           ; 1 bytes @ 0x8
   484  000009                     	ds	1
   485  00000A                     ??_ISR:
   486                           
   487                           ; 1 bytes @ 0x9
   488  00000A                     	ds	14
   489  000018                     ISR@i:
   490                           	opt stack 0
   491                           
   492                           ; 1 bytes @ 0x17
   493  000018                     	ds	1
   494  000019                     ?___lwdiv:
   495                           	opt stack 0
   496  000019                     ?___lldiv:
   497                           	opt stack 0
   498  000019                     serial_send_data@data:
   499                           	opt stack 0
   500  000019                     putch@byte:
   501                           	opt stack 0
   502  000019                     my_memcmp@Ptr1:
   503                           	opt stack 0
   504  000019                     ___lwdiv@dividend:
   505                           	opt stack 0
   506  000019                     memset@p1:
   507                           	opt stack 0
   508  000019                     ___lldiv@dividend:
   509                           	opt stack 0
   510                           
   511                           ; 4 bytes @ 0x18
   512  000019                     	ds	1
   513  00001A                     serial_send_package@buff:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x19
   517  00001A                     	ds	1
   518  00001B                     my_memcmp@Ptr2:
   519                           	opt stack 0
   520  00001B                     ___lwdiv@divisor:
   521                           	opt stack 0
   522  00001B                     memset@c:
   523                           	opt stack 0
   524                           
   525                           ; 2 bytes @ 0x1A
   526  00001B                     	ds	1
   527  00001C                     serial_send_package@size:
   528                           	opt stack 0
   529                           
   530                           ; 1 bytes @ 0x1B
   531  00001C                     	ds	1
   532  00001D                     my_memcmp@Count:
   533                           	opt stack 0
   534  00001D                     ___lwdiv@quotient:
   535                           	opt stack 0
   536  00001D                     memset@n:
   537                           	opt stack 0
   538  00001D                     ___lldiv@divisor:
   539                           	opt stack 0
   540                           
   541                           ; 4 bytes @ 0x1C
   542  00001D                     	ds	1
   543  00001E                     serial_send_package@bcc:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x1D
   547  00001E                     	ds	1
   548  00001F                     ??_my_memcmp:
   549  00001F                     serial_send_package@i:
   550                           	opt stack 0
   551  00001F                     ___lwdiv@counter:
   552                           	opt stack 0
   553  00001F                     memset@p:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0x1E
   557  00001F                     	ds	1
   558  000020                     ?_printf:
   559                           	opt stack 0
   560  000020                     my_memcmp@p1:
   561                           	opt stack 0
   562  000020                     printf@f:
   563                           	opt stack 0
   564  000020                     send_info@buff:
   565                           	opt stack 0
   566                           
   567                           ; 38 bytes @ 0x1F
   568  000020                     	ds	1
   569  000021                     ___lldiv@quotient:
   570                           	opt stack 0
   571                           
   572                           ; 4 bytes @ 0x20
   573  000021                     	ds	1
   574  000022                     my_memcmp@p2:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x21
   578  000022                     	ds	2
   579  000024                     my_memcmp@v:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0x23
   583  000024                     	ds	1
   584  000025                     ___lldiv@counter:
   585                           	opt stack 0
   586                           
   587                           ; 1 bytes @ 0x24
   588  000025                     	ds	1
   589  000026                     printf@flag:
   590                           	opt stack 0
   591  000026                     usart_init@BAUDRATE:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x25
   595  000026                     	ds	1
   596  000027                     printf@idx:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0x26
   600  000027                     	ds	1
   601  000028                     ??_usart_init:
   602  000028                     printf@val:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x27
   606  000028                     	ds	2
   607  00002A                     printf@prec:
   608                           	opt stack 0
   609                           
   610                           ; 1 bytes @ 0x29
   611  00002A                     	ds	1
   612  00002B                     printf@ap:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x2A
   616  00002B                     	ds	2
   617  00002D                     printf@cp:
   618                           	opt stack 0
   619                           
   620                           ; 2 bytes @ 0x2C
   621  00002D                     	ds	1
   622  00002E                     usart_init@DIVIDER:
   623                           	opt stack 0
   624                           
   625                           ; 4 bytes @ 0x2D
   626  00002E                     	ds	1
   627  00002F                     printf@c:
   628                           	opt stack 0
   629                           
   630                           ; 1 bytes @ 0x2E
   631  00002F                     	ds	1
   632  000030                     ??_check_package_bcc:
   633                           
   634                           ; 1 bytes @ 0x2F
   635  000030                     	ds	7
   636  000037                     check_package_bcc@bcc:
   637                           	opt stack 0
   638                           
   639                           ; 1 bytes @ 0x36
   640  000037                     	ds	1
   641  000038                     check_package_bcc@i:
   642                           	opt stack 0
   643                           
   644                           ; 1 bytes @ 0x37
   645  000038                     	ds	14
   646  000046                     tblptru	equ	0xFF8
   647                           tblptrh	equ	0xFF7
   648                           tblptrl	equ	0xFF6
   649                           tablat	equ	0xFF5
   650                           postinc0	equ	0xFEE
   651                           wreg	equ	0xFE8
   652                           postdec1	equ	0xFE5
   653                           fsr1l	equ	0xFE1
   654                           
   655                           ; 1 bytes @ 0x45
   656 ;;
   657 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   658 ;;
   659 ;; *************** function _main *****************
   660 ;; Defined at:
   661 ;;		line 39 in file "C:/Users/F.ArGe/Desktop/deneme/node1.X/main.c"
   662 ;; Parameters:    Size  Location     Type
   663 ;;		None
   664 ;; Auto vars:     Size  Location     Type
   665 ;;		None
   666 ;; Return value:  Size  Location     Type
   667 ;;                  1    wreg      void 
   668 ;; Registers used:
   669 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   670 ;; Tracked objects:
   671 ;;		On entry : 0/0
   672 ;;		On exit  : 0/0
   673 ;;		Unchanged: 0/0
   674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   679 ;;Total ram usage:        0 bytes
   680 ;; Hardware stack levels required when called:    8
   681 ;; This function calls:
   682 ;;		_printf
   683 ;;		_serial_rx_process
   684 ;;		_usart_init
   685 ;;		_usart_isr_init
   686 ;; This function is called by:
   687 ;;		Startup code after reset
   688 ;; This function uses a non-reentrant model
   689 ;;
   690                           
   691                           	psect	text0
   692  00176C                     __ptext0:
   693                           	opt stack 0
   694  00176C                     _main:
   695                           	opt stack 23
   696                           
   697                           ;main.c: 41: TRISC = 0b10000000;
   698                           
   699                           ;incstack = 0
   700  00176C  0E80               	movlw	128
   701  00176E  6E94               	movwf	3988,c	;volatile
   702                           
   703                           ;main.c: 42: ANSELC = 0;
   704  001770  010F               	movlb	15	; () banked
   705  001772  6B3A               	clrf	58,b	;volatile
   706                           
   707                           ;main.c: 44: ANSELB = 0;
   708  001774  6B39               	clrf	57,b	;volatile
   709                           
   710                           ;main.c: 46: TRISB = 0x00;
   711  001776  6A93               	clrf	3987,c	;volatile
   712                           
   713                           ; BSR set to: 15
   714                           ;main.c: 47: LATB0 = 1;
   715  001778  808A               	bsf	3978,0,c	;volatile
   716                           
   717                           ; BSR set to: 15
   718                           ;main.c: 49: usart_init(9600U);
   719  00177A  0E25               	movlw	37
   720  00177C  6E27               	movwf	usart_init@BAUDRATE+1,c
   721  00177E  0E80               	movlw	128
   722  001780  6E26               	movwf	usart_init@BAUDRATE,c
   723  001782  EC8A  F00A         	call	_usart_init	;wreg free
   724                           
   725                           ;main.c: 50: usart_isr_init();
   726  001786  EC5E  F00C         	call	_usart_isr_init	;wreg free
   727                           
   728                           ;main.c: 52: printf("|---Node_1 Started---|\r\n");
   729  00178A  0E6C               	movlw	low STR_1
   730  00178C  6E20               	movwf	printf@f,c
   731  00178E  0E10               	movlw	high STR_1
   732  001790  6E21               	movwf	printf@f+1,c
   733  001792  EC69  F008         	call	_printf	;wreg free
   734  001796                     l1593:
   735                           
   736                           ;main.c: 57: {
   737                           ;main.c: 58: serial_rx_process();
   738  001796  EC2A  F009         	call	_serial_rx_process	;wreg free
   739  00179A  D7FD               	goto	l1593
   740  00179C                     __end_of_main:
   741                           	opt stack 0
   742                           tblptru	equ	0xFF8
   743                           tblptrh	equ	0xFF7
   744                           tblptrl	equ	0xFF6
   745                           tablat	equ	0xFF5
   746                           postinc0	equ	0xFEE
   747                           wreg	equ	0xFE8
   748                           postdec1	equ	0xFE5
   749                           fsr1l	equ	0xFE1
   750                           
   751 ;; *************** function _usart_isr_init *****************
   752 ;; Defined at:
   753 ;;		line 49 in file "C:/Users/F.ArGe/Desktop/deneme/node1.X/usart.c"
   754 ;; Parameters:    Size  Location     Type
   755 ;;		None
   756 ;; Auto vars:     Size  Location     Type
   757 ;;		None
   758 ;; Return value:  Size  Location     Type
   759 ;;                  1    wreg      void 
   760 ;; Registers used:
   761 ;;		None
   762 ;; Tracked objects:
   763 ;;		On entry : 0/0
   764 ;;		On exit  : 0/0
   765 ;;		Unchanged: 0/0
   766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   771 ;;Total ram usage:        0 bytes
   772 ;; Hardware stack levels used:    1
   773 ;; Hardware stack levels required when called:    4
   774 ;; This function calls:
   775 ;;		Nothing
   776 ;; This function is called by:
   777 ;;		_main
   778 ;; This function uses a non-reentrant model
   779 ;;
   780                           
   781                           	psect	text1
   782  0018BC                     __ptext1:
   783                           	opt stack 0
   784  0018BC                     _usart_isr_init:
   785                           	opt stack 26
   786                           
   787                           ;usart.c: 52: RCONbits.IPEN = 0;
   788                           
   789                           ;incstack = 0
   790  0018BC  9ED0               	bcf	4048,7,c	;volatile
   791                           
   792                           ;usart.c: 53: INTCONbits.GIE = 1;
   793  0018BE  8EF2               	bsf	intcon,7,c	;volatile
   794                           
   795                           ;usart.c: 54: INTCONbits.PEIE = 1;
   796  0018C0  8CF2               	bsf	intcon,6,c	;volatile
   797                           
   798                           ;usart.c: 55: PIE1bits.RCIE = 1;
   799  0018C2  8A9D               	bsf	3997,5,c	;volatile
   800  0018C4  0012               	return		;funcret
   801  0018C6                     __end_of_usart_isr_init:
   802                           	opt stack 0
   803                           tblptru	equ	0xFF8
   804                           tblptrh	equ	0xFF7
   805                           tblptrl	equ	0xFF6
   806                           tablat	equ	0xFF5
   807                           intcon	equ	0xFF2
   808                           postinc0	equ	0xFEE
   809                           wreg	equ	0xFE8
   810                           postdec1	equ	0xFE5
   811                           fsr1l	equ	0xFE1
   812                           
   813 ;; *************** function _usart_init *****************
   814 ;; Defined at:
   815 ;;		line 4 in file "C:/Users/F.ArGe/Desktop/deneme/node1.X/usart.c"
   816 ;; Parameters:    Size  Location     Type
   817 ;;  BAUDRATE        2   37[COMRAM] unsigned int 
   818 ;; Auto vars:     Size  Location     Type
   819 ;;  DIVIDER         4   45[COMRAM] unsigned long 
   820 ;; Return value:  Size  Location     Type
   821 ;;                  1    wreg      void 
   822 ;; Registers used:
   823 ;;		wreg, status,2, status,0, cstack
   824 ;; Tracked objects:
   825 ;;		On entry : 0/0
   826 ;;		On exit  : 0/0
   827 ;;		Unchanged: 0/0
   828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   829 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   830 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   831 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   832 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   833 ;;Total ram usage:       12 bytes
   834 ;; Hardware stack levels used:    1
   835 ;; Hardware stack levels required when called:    5
   836 ;; This function calls:
   837 ;;		___lldiv
   838 ;; This function is called by:
   839 ;;		_main
   840 ;; This function uses a non-reentrant model
   841 ;;
   842                           
   843                           	psect	text2
   844  001514                     __ptext2:
   845                           	opt stack 0
   846  001514                     _usart_init:
   847                           	opt stack 25
   848                           
   849                           ;usart.c: 6: unsigned long int DIVIDER;
   850                           ;usart.c: 7: DIVIDER = ((int) (4000000UL / (16UL * BAUDRATE) - 1));
   851                           
   852                           ;incstack = 0
   853  001514  6828               	setf	??_usart_init& (0+255),c
   854  001516  6829               	setf	(??_usart_init+1)& (0+255),c
   855  001518  6A19               	clrf	___lldiv@dividend,c
   856  00151A  0E09               	movlw	9
   857  00151C  6E1A               	movwf	___lldiv@dividend+1,c
   858  00151E  0E3D               	movlw	61
   859  001520  6E1B               	movwf	___lldiv@dividend+2,c
   860  001522  6A1C               	clrf	___lldiv@dividend+3,c
   861  001524  5026               	movf	usart_init@BAUDRATE,w,c
   862  001526  6E2A               	movwf	(??_usart_init+2)& (0+255),c
   863  001528  5027               	movf	usart_init@BAUDRATE+1,w,c
   864  00152A  6E2B               	movwf	(??_usart_init+3)& (0+255),c
   865  00152C  6A2C               	clrf	(??_usart_init+4)& (0+255),c
   866  00152E  6A2D               	clrf	(??_usart_init+5)& (0+255),c
   867  001530  0E04               	movlw	4
   868  001532                     u975:
   869  001532  90D8               	bcf	status,0,c
   870  001534  362A               	rlcf	??_usart_init+2,f,c
   871  001536  362B               	rlcf	??_usart_init+3,f,c
   872  001538  362C               	rlcf	??_usart_init+4,f,c
   873  00153A  362D               	rlcf	??_usart_init+5,f,c
   874  00153C  2EE8               	decfsz	wreg,f,c
   875  00153E  D7F9               	goto	u975
   876  001540  C02A  F01D         	movff	??_usart_init+2,___lldiv@divisor
   877  001544  C02B  F01E         	movff	??_usart_init+3,___lldiv@divisor+1
   878  001548  C02C  F01F         	movff	??_usart_init+4,___lldiv@divisor+2
   879  00154C  C02D  F020         	movff	??_usart_init+5,___lldiv@divisor+3
   880  001550  EC13  F00B         	call	___lldiv	;wreg free
   881  001554  5028               	movf	??_usart_init,w,c
   882  001556  2619               	addwf	?___lldiv,f,c
   883  001558  5029               	movf	??_usart_init+1,w,c
   884  00155A  221A               	addwfc	?___lldiv+1,f,c
   885  00155C  C019  F02E         	movff	?___lldiv,usart_init@DIVIDER
   886  001560  C01A  F02F         	movff	?___lldiv+1,usart_init@DIVIDER+1
   887  001564  0E00               	movlw	0
   888  001566  BE2F               	btfsc	usart_init@DIVIDER+1,7,c
   889  001568  0EFF               	movlw	-1
   890  00156A  6E30               	movwf	usart_init@DIVIDER+2,c
   891  00156C  6E31               	movwf	usart_init@DIVIDER+3,c
   892                           
   893                           ;usart.c: 8: if (DIVIDER > 255)
   894  00156E  5031               	movf	usart_init@DIVIDER+3,w,c
   895  001570  1030               	iorwf	usart_init@DIVIDER+2,w,c
   896  001572  E102               	bnz	u980
   897  001574  042F               	decf	usart_init@DIVIDER+1,w,c
   898  001576  E306               	bnc	l174
   899  001578                     u980:
   900                           
   901                           ;usart.c: 9: {
   902                           ;usart.c: 10: BAUDCON1bits.BRG16 = 1;
   903  001578  86B8               	bsf	4024,3,c	;volatile
   904                           
   905                           ;usart.c: 11: SPBRG = DIVIDER;
   906  00157A  C02E  FFAF         	movff	usart_init@DIVIDER,4015	;volatile
   907                           
   908                           ;usart.c: 12: SPBRGH1 = DIVIDER >> 8;
   909  00157E  C02F  FFB0         	movff	usart_init@DIVIDER+1,4016	;volatile
   910                           
   911                           ;usart.c: 13: }
   912  001582  D003               	goto	l175
   913  001584                     l174:
   914                           
   915                           ;usart.c: 14: else
   916                           ;usart.c: 15: {
   917                           ;usart.c: 16: BAUDCON1bits.BRG16 = 0;
   918  001584  96B8               	bcf	4024,3,c	;volatile
   919                           
   920                           ;usart.c: 17: SPBRG = DIVIDER;
   921  001586  C02E  FFAF         	movff	usart_init@DIVIDER,4015	;volatile
   922  00158A                     l175:
   923                           
   924                           ;usart.c: 18: }
   925                           ;usart.c: 20: TRISC7 = 1;
   926  00158A  8E94               	bsf	3988,7,c	;volatile
   927                           
   928                           ;usart.c: 21: TRISC6 = 0;
   929  00158C  9C94               	bcf	3988,6,c	;volatile
   930                           
   931                           ;usart.c: 24: TXSTAbits.TX9 = 0;
   932  00158E  9CAC               	bcf	4012,6,c	;volatile
   933                           
   934                           ;usart.c: 25: TXSTAbits.TXEN = 1;
   935  001590  8AAC               	bsf	4012,5,c	;volatile
   936                           
   937                           ;usart.c: 26: TXSTAbits.SYNC = 0;
   938  001592  98AC               	bcf	4012,4,c	;volatile
   939                           
   940                           ;usart.c: 27: TXSTAbits.BRGH = 1;
   941  001594  84AC               	bsf	4012,2,c	;volatile
   942                           
   943                           ;usart.c: 29: RCSTAbits.RX9 = 0;
   944  001596  9CAB               	bcf	4011,6,c	;volatile
   945                           
   946                           ;usart.c: 30: RCSTAbits.SPEN = 1;
   947  001598  8EAB               	bsf	4011,7,c	;volatile
   948                           
   949                           ;usart.c: 31: RCSTAbits.CREN = 1;
   950  00159A  88AB               	bsf	4011,4,c	;volatile
   951  00159C  0012               	return		;funcret
   952  00159E                     __end_of_usart_init:
   953                           	opt stack 0
   954                           tblptru	equ	0xFF8
   955                           tblptrh	equ	0xFF7
   956                           tblptrl	equ	0xFF6
   957                           tablat	equ	0xFF5
   958                           intcon	equ	0xFF2
   959                           postinc0	equ	0xFEE
   960                           wreg	equ	0xFE8
   961                           postdec1	equ	0xFE5
   962                           fsr1l	equ	0xFE1
   963                           status	equ	0xFD8
   964                           
   965 ;; *************** function ___lldiv *****************
   966 ;; Defined at:
   967 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\lldiv.c"
   968 ;; Parameters:    Size  Location     Type
   969 ;;  dividend        4   24[COMRAM] unsigned long 
   970 ;;  divisor         4   28[COMRAM] unsigned long 
   971 ;; Auto vars:     Size  Location     Type
   972 ;;  quotient        4   32[COMRAM] unsigned long 
   973 ;;  counter         1   36[COMRAM] unsigned char 
   974 ;; Return value:  Size  Location     Type
   975 ;;                  4   24[COMRAM] unsigned long 
   976 ;; Registers used:
   977 ;;		wreg, status,2, status,0
   978 ;; Tracked objects:
   979 ;;		On entry : 0/0
   980 ;;		On exit  : 0/0
   981 ;;		Unchanged: 0/0
   982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   983 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   984 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   986 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   987 ;;Total ram usage:       13 bytes
   988 ;; Hardware stack levels used:    1
   989 ;; Hardware stack levels required when called:    4
   990 ;; This function calls:
   991 ;;		Nothing
   992 ;; This function is called by:
   993 ;;		_usart_init
   994 ;; This function uses a non-reentrant model
   995 ;;
   996                           
   997                           	psect	text3
   998  001626                     __ptext3:
   999                           	opt stack 0
  1000  001626                     ___lldiv:
  1001                           	opt stack 25
  1002                           
  1003                           ;incstack = 0
  1004  001626  6A21               	clrf	___lldiv@quotient,c
  1005  001628  6A22               	clrf	___lldiv@quotient+1,c
  1006  00162A  6A23               	clrf	___lldiv@quotient+2,c
  1007  00162C  6A24               	clrf	___lldiv@quotient+3,c
  1008  00162E  501D               	movf	___lldiv@divisor,w,c
  1009  001630  101E               	iorwf	___lldiv@divisor+1,w,c
  1010  001632  101F               	iorwf	___lldiv@divisor+2,w,c
  1011  001634  1020               	iorwf	___lldiv@divisor+3,w,c
  1012  001636  E029               	bz	l573
  1013  001638  0E01               	movlw	1
  1014  00163A  6E25               	movwf	___lldiv@counter,c
  1015  00163C  D006               	goto	l1449
  1016  00163E                     l1447:
  1017  00163E  90D8               	bcf	status,0,c
  1018  001640  361D               	rlcf	___lldiv@divisor,f,c
  1019  001642  361E               	rlcf	___lldiv@divisor+1,f,c
  1020  001644  361F               	rlcf	___lldiv@divisor+2,f,c
  1021  001646  3620               	rlcf	___lldiv@divisor+3,f,c
  1022  001648  2A25               	incf	___lldiv@counter,f,c
  1023  00164A                     l1449:
  1024  00164A  AE20               	btfss	___lldiv@divisor+3,7,c
  1025  00164C  D7F8               	goto	l1447
  1026  00164E                     l1451:
  1027  00164E  90D8               	bcf	status,0,c
  1028  001650  3621               	rlcf	___lldiv@quotient,f,c
  1029  001652  3622               	rlcf	___lldiv@quotient+1,f,c
  1030  001654  3623               	rlcf	___lldiv@quotient+2,f,c
  1031  001656  3624               	rlcf	___lldiv@quotient+3,f,c
  1032  001658  501D               	movf	___lldiv@divisor,w,c
  1033  00165A  5C19               	subwf	___lldiv@dividend,w,c
  1034  00165C  501E               	movf	___lldiv@divisor+1,w,c
  1035  00165E  581A               	subwfb	___lldiv@dividend+1,w,c
  1036  001660  501F               	movf	___lldiv@divisor+2,w,c
  1037  001662  581B               	subwfb	___lldiv@dividend+2,w,c
  1038  001664  5020               	movf	___lldiv@divisor+3,w,c
  1039  001666  581C               	subwfb	___lldiv@dividend+3,w,c
  1040  001668  E309               	bnc	l1459
  1041  00166A  501D               	movf	___lldiv@divisor,w,c
  1042  00166C  5E19               	subwf	___lldiv@dividend,f,c
  1043  00166E  501E               	movf	___lldiv@divisor+1,w,c
  1044  001670  5A1A               	subwfb	___lldiv@dividend+1,f,c
  1045  001672  501F               	movf	___lldiv@divisor+2,w,c
  1046  001674  5A1B               	subwfb	___lldiv@dividend+2,f,c
  1047  001676  5020               	movf	___lldiv@divisor+3,w,c
  1048  001678  5A1C               	subwfb	___lldiv@dividend+3,f,c
  1049  00167A  8021               	bsf	___lldiv@quotient,0,c
  1050  00167C                     l1459:
  1051  00167C  90D8               	bcf	status,0,c
  1052  00167E  3220               	rrcf	___lldiv@divisor+3,f,c
  1053  001680  321F               	rrcf	___lldiv@divisor+2,f,c
  1054  001682  321E               	rrcf	___lldiv@divisor+1,f,c
  1055  001684  321D               	rrcf	___lldiv@divisor,f,c
  1056  001686  2E25               	decfsz	___lldiv@counter,f,c
  1057  001688  D7E2               	goto	l1451
  1058  00168A                     l573:
  1059  00168A  C021  F019         	movff	___lldiv@quotient,?___lldiv
  1060  00168E  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
  1061  001692  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
  1062  001696  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
  1063  00169A  0012               	return		;funcret
  1064  00169C                     __end_of___lldiv:
  1065                           	opt stack 0
  1066                           tblptru	equ	0xFF8
  1067                           tblptrh	equ	0xFF7
  1068                           tblptrl	equ	0xFF6
  1069                           tablat	equ	0xFF5
  1070                           intcon	equ	0xFF2
  1071                           postinc0	equ	0xFEE
  1072                           wreg	equ	0xFE8
  1073                           postdec1	equ	0xFE5
  1074                           fsr1l	equ	0xFE1
  1075                           status	equ	0xFD8
  1076                           
  1077 ;; *************** function _serial_rx_process *****************
  1078 ;; Defined at:
  1079 ;;		line 180 in file "C:/Users/F.ArGe/Desktop/deneme/node1.X/serial.c"
  1080 ;; Parameters:    Size  Location     Type
  1081 ;;		None
  1082 ;; Auto vars:     Size  Location     Type
  1083 ;;  get_info        9   14[BANK0 ] const unsigned char [9]
  1084 ;;  led1_off        9    5[BANK0 ] const unsigned char [9]
  1085 ;;  led1_on         8   23[BANK0 ] const unsigned char [8]
  1086 ;; Return value:  Size  Location     Type
  1087 ;;                  1    wreg      void 
  1088 ;; Registers used:
  1089 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1090 ;; Tracked objects:
  1091 ;;		On entry : 0/0
  1092 ;;		On exit  : 0/0
  1093 ;;		Unchanged: 0/0
  1094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1096 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1097 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1098 ;;      Totals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1099 ;;Total ram usage:       31 bytes
  1100 ;; Hardware stack levels used:    1
  1101 ;; Hardware stack levels required when called:    7
  1102 ;; This function calls:
  1103 ;;		_LED1_OFF
  1104 ;;		_LED1_ON
  1105 ;;		_check_package_bcc
  1106 ;;		_is_package_ready
  1107 ;;		_my_memcmp
  1108 ;;		_printf
  1109 ;;		_reset_serial_com
  1110 ;;		_send_info
  1111 ;; This function is called by:
  1112 ;;		_main
  1113 ;; This function uses a non-reentrant model
  1114 ;;
  1115                           
  1116                           	psect	text4
  1117  001254                     __ptext4:
  1118                           	opt stack 0
  1119  001254                     _serial_rx_process:
  1120                           	opt stack 23
  1121                           
  1122                           ;serial.c: 182: const char led1_on[] = "LED1_ON";
  1123                           
  1124                           ;incstack = 0
  1125  001254  0E2B               	movlw	low serial_rx_process@F7954
  1126  001256  6EF6               	movwf	tblptrl,c
  1127  001258                     	if	1	;There is more than 1 active tblptr byte
  1128  001258  0E10               	movlw	high serial_rx_process@F7954
  1129  00125A  6EF7               	movwf	tblptrh,c
  1130  00125C                     	endif
  1131  00125C                     	if	1	;There are 3 active tblptr bytes
  1132  00125C  0E00               	movlw	low (serial_rx_process@F7954 shr (0+16))
  1133  00125E  6EF8               	movwf	tblptru,c
  1134  001260                     	endif
  1135  001260  EE20  F09D         	lfsr	2,serial_rx_process@led1_on
  1136  001264  0E07               	movlw	7
  1137  001266                     u990:
  1138  001266  0009               	tblrd		*+
  1139  001268  CFF5 FFDE          	movff	tablat,postinc2
  1140  00126C  06E8               	decf	wreg,f,c
  1141  00126E  E2FB               	bc	u990
  1142                           
  1143                           ;serial.c: 183: const char led1_off[] = "LED1_OFF";
  1144  001270  0E11               	movlw	low serial_rx_process@F7956
  1145  001272  6EF6               	movwf	tblptrl,c
  1146  001274                     	if	1	;There is more than 1 active tblptr byte
  1147  001274  0E10               	movlw	high serial_rx_process@F7956
  1148  001276  6EF7               	movwf	tblptrh,c
  1149  001278                     	endif
  1150  001278                     	if	1	;There are 3 active tblptr bytes
  1151  001278  0E00               	movlw	low (serial_rx_process@F7956 shr (0+16))
  1152  00127A  6EF8               	movwf	tblptru,c
  1153  00127C                     	endif
  1154  00127C  EE20  F08B         	lfsr	2,serial_rx_process@led1_off
  1155  001280  0E08               	movlw	8
  1156  001282                     u1000:
  1157  001282  0009               	tblrd		*+
  1158  001284  CFF5 FFDE          	movff	tablat,postinc2
  1159  001288  06E8               	decf	wreg,f,c
  1160  00128A  E2FB               	bc	u1000
  1161                           
  1162                           ;serial.c: 184: const char get_info[] = "GET_INFO";
  1163  00128C  0E1A               	movlw	low serial_rx_process@F7958
  1164  00128E  6EF6               	movwf	tblptrl,c
  1165  001290                     	if	1	;There is more than 1 active tblptr byte
  1166  001290  0E10               	movlw	high serial_rx_process@F7958
  1167  001292  6EF7               	movwf	tblptrh,c
  1168  001294                     	endif
  1169  001294                     	if	1	;There are 3 active tblptr bytes
  1170  001294  0E00               	movlw	low (serial_rx_process@F7958 shr (0+16))
  1171  001296  6EF8               	movwf	tblptru,c
  1172  001298                     	endif
  1173  001298  EE20  F094         	lfsr	2,serial_rx_process@get_info
  1174  00129C  0E08               	movlw	8
  1175  00129E                     u1010:
  1176  00129E  0009               	tblrd		*+
  1177  0012A0  CFF5 FFDE          	movff	tablat,postinc2
  1178  0012A4  06E8               	decf	wreg,f,c
  1179  0012A6  E2FB               	bc	u1010
  1180                           
  1181                           ;serial.c: 186: if (!is_package_ready())
  1182  0012A8  EC52  F00C         	call	_is_package_ready	;wreg free
  1183  0012AC  0900               	iorlw	0
  1184  0012AE  E101               	bnz	l1541
  1185                           
  1186                           ;serial.c: 187: return;
  1187  0012B0  0012               	return	
  1188  0012B2                     l1541:
  1189                           
  1190                           ;serial.c: 189: if (!check_package_bcc())
  1191  0012B2  ECBF  F009         	call	_check_package_bcc	;wreg free
  1192  0012B6  0900               	iorlw	0
  1193  0012B8  E102               	bnz	l1547
  1194                           
  1195                           ;serial.c: 190: {
  1196                           ;serial.c: 191: reset_serial_com();
  1197  0012BA  EF1C  F00C         	goto	_reset_serial_com	;wreg free
  1198  0012BE                     l1547:
  1199                           
  1200                           ;serial.c: 193: }
  1201                           ;serial.c: 194: printf("|--------------------------|\r\n");
  1202  0012BE  0E33               	movlw	low STR_5
  1203  0012C0  6E20               	movwf	printf@f,c
  1204  0012C2  0E10               	movlw	high STR_5
  1205  0012C4  6E21               	movwf	printf@f+1,c
  1206  0012C6  EC69  F008         	call	_printf	;wreg free
  1207                           
  1208                           ;serial.c: 195: printf("Alinan Data: %s BCC: %x\r\n", serial.buffer, serial.buffer[seria
      +                          l.index - 1]);
  1209  0012CA  0E52               	movlw	low STR_6
  1210  0012CC  6E20               	movwf	printf@f,c
  1211  0012CE  0E10               	movlw	high STR_6
  1212  0012D0  6E21               	movwf	printf@f+1,c
  1213  0012D2  0E00               	movlw	low _serial
  1214  0012D4  6E22               	movwf	?_printf+2,c
  1215  0012D6  0E01               	movlw	high _serial
  1216  0012D8  6E23               	movwf	?_printf+3,c
  1217  0012DA  0100               	movlb	0	; () banked
  1218  0012DC  6986               	setf	??_serial_rx_process& (0+255),b
  1219  0012DE  6987               	setf	(??_serial_rx_process+1)& (0+255),b
  1220  0012E0  0101               	movlb	1	; () banked
  1221  0012E2  5180               	movf	(_serial+128)& (0+255),w,b
  1222  0012E4  0100               	movlb	0	; () banked
  1223  0012E6  6F88               	movwf	(??_serial_rx_process+2)& (0+255),b
  1224  0012E8  6B89               	clrf	(??_serial_rx_process+3)& (0+255),b
  1225  0012EA  5186               	movf	??_serial_rx_process& (0+255),w,b
  1226  0012EC  2788               	addwf	(??_serial_rx_process+2)& (0+255),f,b
  1227  0012EE  5187               	movf	(??_serial_rx_process+1)& (0+255),w,b
  1228  0012F0  2389               	addwfc	(??_serial_rx_process+3)& (0+255),f,b
  1229  0012F2  0E00               	movlw	low _serial
  1230  0012F4  2588               	addwf	(??_serial_rx_process+2)& (0+255),w,b
  1231  0012F6  6ED9               	movwf	fsr2l,c
  1232  0012F8  0E01               	movlw	high _serial
  1233  0012FA  2189               	addwfc	(??_serial_rx_process+3)& (0+255),w,b
  1234  0012FC  6EDA               	movwf	fsr2h,c
  1235  0012FE  50DF               	movf	indf2,w,c
  1236  001300  6F8A               	movwf	(??_serial_rx_process+4)& (0+255),b
  1237  001302  518A               	movf	(??_serial_rx_process+4)& (0+255),w,b
  1238  001304  6E24               	movwf	?_printf+4,c
  1239  001306  6A25               	clrf	?_printf+5,c
  1240  001308  EC69  F008         	call	_printf	;wreg free
  1241                           
  1242                           ;serial.c: 198: if (my_memcmp(serial.buffer, led1_on, sizeof (led1_on) - 1) == 0)
  1243  00130C  0E00               	movlw	low _serial
  1244  00130E  6E19               	movwf	my_memcmp@Ptr1,c
  1245  001310  0E01               	movlw	high _serial
  1246  001312  6E1A               	movwf	my_memcmp@Ptr1+1,c
  1247  001314  0E9D               	movlw	low serial_rx_process@led1_on
  1248  001316  6E1B               	movwf	my_memcmp@Ptr2,c
  1249  001318  0E00               	movlw	high serial_rx_process@led1_on
  1250  00131A  6E1C               	movwf	my_memcmp@Ptr2+1,c
  1251  00131C  6A1E               	clrf	my_memcmp@Count+1,c
  1252  00131E  0E07               	movlw	7
  1253  001320  6E1D               	movwf	my_memcmp@Count,c
  1254  001322  EC4E  F00B         	call	_my_memcmp	;wreg free
  1255  001326  0900               	iorlw	0
  1256  001328  E104               	bnz	l1557
  1257                           
  1258                           ;serial.c: 199: {
  1259                           ;serial.c: 200: LED1_ON();
  1260  00132A  EC3C  F00C         	call	_LED1_ON	;wreg free
  1261                           
  1262                           ;serial.c: 201: reset_serial_com();
  1263  00132E  EF1C  F00C         	goto	_reset_serial_com	;wreg free
  1264  001332                     l1557:
  1265                           
  1266                           ;serial.c: 203: }
  1267                           ;serial.c: 205: if (my_memcmp(serial.buffer, led1_off, sizeof (led1_off) - 1) == 0)
  1268  001332  0E00               	movlw	low _serial
  1269  001334  6E19               	movwf	my_memcmp@Ptr1,c
  1270  001336  0E01               	movlw	high _serial
  1271  001338  6E1A               	movwf	my_memcmp@Ptr1+1,c
  1272  00133A  0E8B               	movlw	low serial_rx_process@led1_off
  1273  00133C  6E1B               	movwf	my_memcmp@Ptr2,c
  1274  00133E  0E00               	movlw	high serial_rx_process@led1_off
  1275  001340  6E1C               	movwf	my_memcmp@Ptr2+1,c
  1276  001342  6A1E               	clrf	my_memcmp@Count+1,c
  1277  001344  0E08               	movlw	8
  1278  001346  6E1D               	movwf	my_memcmp@Count,c
  1279  001348  EC4E  F00B         	call	_my_memcmp	;wreg free
  1280  00134C  0900               	iorlw	0
  1281  00134E  E104               	bnz	l1565
  1282                           
  1283                           ;serial.c: 206: {
  1284                           ;serial.c: 207: LED1_OFF();
  1285  001350  EC44  F00C         	call	_LED1_OFF	;wreg free
  1286                           
  1287                           ;serial.c: 208: reset_serial_com();
  1288  001354  EF1C  F00C         	goto	_reset_serial_com	;wreg free
  1289  001358                     l1565:
  1290                           
  1291                           ;serial.c: 210: }
  1292                           ;serial.c: 212: if (my_memcmp(serial.buffer, get_info, sizeof (get_info) - 1) == 0)
  1293  001358  0E00               	movlw	low _serial
  1294  00135A  6E19               	movwf	my_memcmp@Ptr1,c
  1295  00135C  0E01               	movlw	high _serial
  1296  00135E  6E1A               	movwf	my_memcmp@Ptr1+1,c
  1297  001360  0E94               	movlw	low serial_rx_process@get_info
  1298  001362  6E1B               	movwf	my_memcmp@Ptr2,c
  1299  001364  0E00               	movlw	high serial_rx_process@get_info
  1300  001366  6E1C               	movwf	my_memcmp@Ptr2+1,c
  1301  001368  6A1E               	clrf	my_memcmp@Count+1,c
  1302  00136A  0E08               	movlw	8
  1303  00136C  6E1D               	movwf	my_memcmp@Count,c
  1304  00136E  EC4E  F00B         	call	_my_memcmp	;wreg free
  1305  001372  0900               	iorlw	0
  1306  001374  E102               	bnz	l1573
  1307                           
  1308                           ;serial.c: 213: {
  1309                           ;serial.c: 214: send_info();
  1310  001376  EC0B  F00C         	call	_send_info	;wreg free
  1311  00137A                     l1573:
  1312                           
  1313                           ;serial.c: 217: }
  1314                           ;serial.c: 219: reset_serial_com();
  1315  00137A  EF1C  F00C         	goto	_reset_serial_com	;wreg free
  1316  00137E                     __end_of_serial_rx_process:
  1317                           	opt stack 0
  1318                           tblptru	equ	0xFF8
  1319                           tblptrh	equ	0xFF7
  1320                           tblptrl	equ	0xFF6
  1321                           tablat	equ	0xFF5
  1322                           intcon	equ	0xFF2
  1323                           postinc0	equ	0xFEE
  1324                           wreg	equ	0xFE8
  1325                           postdec1	equ	0xFE5
  1326                           fsr1l	equ	0xFE1
  1327                           indf2	equ	0xFDF
  1328                           postinc2	equ	0xFDE
  1329                           fsr2h	equ	0xFDA
  1330                           fsr2l	equ	0xFD9
  1331                           status	equ	0xFD8
  1332                           
  1333 ;; *************** function _send_info *****************
  1334 ;; Defined at:
  1335 ;;		line 235 in file "C:/Users/F.ArGe/Desktop/deneme/node1.X/serial.c"
  1336 ;; Parameters:    Size  Location     Type
  1337 ;;		None
  1338 ;; Auto vars:     Size  Location     Type
  1339 ;;  buff           38   31[COMRAM] unsigned char [38]
  1340 ;; Return value:  Size  Location     Type
  1341 ;;                  1    wreg      void 
  1342 ;; Registers used:
  1343 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1344 ;; Tracked objects:
  1345 ;;		On entry : 0/0
  1346 ;;		On exit  : 0/0
  1347 ;;		Unchanged: 0/0
  1348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1350 ;;      Locals:        38       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1352 ;;      Totals:        38       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1353 ;;Total ram usage:       38 bytes
  1354 ;; Hardware stack levels used:    1
  1355 ;; Hardware stack levels required when called:    6
  1356 ;; This function calls:
  1357 ;;		_serial_send_package
  1358 ;; This function is called by:
  1359 ;;		_serial_rx_process
  1360 ;; This function uses a non-reentrant model
  1361 ;;
  1362                           
  1363                           	psect	text5
  1364  001816                     __ptext5:
  1365                           	opt stack 0
  1366  001816                     _send_info:
  1367                           	opt stack 23
  1368                           
  1369                           ;serial.c: 237: char buff[] = "INFO:Mcu: PIC18F46K22 Compiler: XC8\r\n";
  1370                           
  1371                           ;incstack = 0
  1372  001816  EE20  F060         	lfsr	2,send_info@F7963
  1373  00181A  EE10  F020         	lfsr	1,send_info@buff
  1374  00181E  0E25               	movlw	37
  1375  001820                     u871:
  1376  001820  CFDB FFE3          	movff	plusw2,plusw1
  1377  001824  06E8               	decf	wreg,f,c
  1378  001826  E2FC               	bc	u871
  1379                           
  1380                           ;serial.c: 239: serial_send_package(buff, sizeof (buff) - 1);
  1381  001828  0E20               	movlw	low send_info@buff
  1382  00182A  6E1A               	movwf	serial_send_package@buff,c
  1383  00182C  0E00               	movlw	high send_info@buff
  1384  00182E  6E1B               	movwf	serial_send_package@buff+1,c
  1385  001830  0E25               	movlw	37
  1386  001832  6E1C               	movwf	serial_send_package@size,c
  1387  001834  EF33  F00A         	goto	_serial_send_package	;wreg free
  1388  001838                     __end_of_send_info:
  1389                           	opt stack 0
  1390                           tblptru	equ	0xFF8
  1391                           tblptrh	equ	0xFF7
  1392                           tblptrl	equ	0xFF6
  1393                           tablat	equ	0xFF5
  1394                           intcon	equ	0xFF2
  1395                           postinc0	equ	0xFEE
  1396                           wreg	equ	0xFE8
  1397                           postdec1	equ	0xFE5
  1398                           plusw1	equ	0xFE3
  1399                           fsr1l	equ	0xFE1
  1400                           indf2	equ	0xFDF
  1401                           postinc2	equ	0xFDE
  1402                           plusw2	equ	0xFDB
  1403                           fsr2h	equ	0xFDA
  1404                           fsr2l	equ	0xFD9
  1405                           status	equ	0xFD8
  1406                           
  1407 ;; *************** function _serial_send_package *****************
  1408 ;; Defined at:
  1409 ;;		line 146 in file "C:/Users/F.ArGe/Desktop/deneme/node1.X/serial.c"
  1410 ;; Parameters:    Size  Location     Type
  1411 ;;  buff            2   25[COMRAM] PTR const unsigned char 
  1412 ;;		 -> send_info@buff(38), 
  1413 ;;  size            1   27[COMRAM] unsigned char 
  1414 ;; Auto vars:     Size  Location     Type
  1415 ;;  i               1   30[COMRAM] unsigned char 
  1416 ;;  bcc             1   29[COMRAM] unsigned char 
  1417 ;; Return value:  Size  Location     Type
  1418 ;;                  1    wreg      void 
  1419 ;; Registers used:
  1420 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1421 ;; Tracked objects:
  1422 ;;		On entry : 0/0
  1423 ;;		On exit  : 0/0
  1424 ;;		Unchanged: 0/0
  1425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1426 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1427 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1428 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1429 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1430 ;;Total ram usage:        6 bytes
  1431 ;; Hardware stack levels used:    1
  1432 ;; Hardware stack levels required when called:    5
  1433 ;; This function calls:
  1434 ;;		_serial_send_data
  1435 ;; This function is called by:
  1436 ;;		_send_info
  1437 ;; This function uses a non-reentrant model
  1438 ;;
  1439                           
  1440                           	psect	text6
  1441  001466                     __ptext6:
  1442                           	opt stack 0
  1443  001466                     _serial_send_package:
  1444                           	opt stack 23
  1445                           
  1446                           ;serial.c: 148: uint8_t bcc = 0;
  1447                           
  1448                           ;incstack = 0
  1449  001466  6A1E               	clrf	serial_send_package@bcc,c
  1450                           
  1451                           ;serial.c: 150: serial_send_data(0x01);
  1452  001468  0E01               	movlw	1
  1453  00146A  EC4C  F00C         	call	_serial_send_data
  1454                           
  1455                           ;serial.c: 152: for (uint8_t i = 0; i < size; i++)
  1456  00146E  6A1F               	clrf	serial_send_package@i,c
  1457  001470  D03B               	goto	l1335
  1458  001472                     l1321:
  1459                           
  1460                           ;serial.c: 153: {
  1461                           ;serial.c: 154: if (buff[i] == 0x01 || buff[i] == 0x04 || buff[i] == 0x10)
  1462  001472  501F               	movf	serial_send_package@i,w,c
  1463  001474  0D01               	mullw	1
  1464  001476  50F3               	movf	prodl,w,c
  1465  001478  241A               	addwf	serial_send_package@buff,w,c
  1466  00147A  6ED9               	movwf	fsr2l,c
  1467  00147C  50F4               	movf	prodh,w,c
  1468  00147E  201B               	addwfc	serial_send_package@buff+1,w,c
  1469  001480  6EDA               	movwf	fsr2h,c
  1470  001482  04DE               	decf	postinc2,w,c
  1471  001484  E017               	bz	l1327
  1472  001486  501F               	movf	serial_send_package@i,w,c
  1473  001488  0D01               	mullw	1
  1474  00148A  50F3               	movf	prodl,w,c
  1475  00148C  241A               	addwf	serial_send_package@buff,w,c
  1476  00148E  6ED9               	movwf	fsr2l,c
  1477  001490  50F4               	movf	prodh,w,c
  1478  001492  201B               	addwfc	serial_send_package@buff+1,w,c
  1479  001494  6EDA               	movwf	fsr2h,c
  1480  001496  0E04               	movlw	4
  1481  001498  18DE               	xorwf	postinc2,w,c
  1482  00149A  E00C               	bz	l1327
  1483  00149C  501F               	movf	serial_send_package@i,w,c
  1484  00149E  0D01               	mullw	1
  1485  0014A0  50F3               	movf	prodl,w,c
  1486  0014A2  241A               	addwf	serial_send_package@buff,w,c
  1487  0014A4  6ED9               	movwf	fsr2l,c
  1488  0014A6  50F4               	movf	prodh,w,c
  1489  0014A8  201B               	addwfc	serial_send_package@buff+1,w,c
  1490  0014AA  6EDA               	movwf	fsr2h,c
  1491  0014AC  0E10               	movlw	16
  1492  0014AE  18DE               	xorwf	postinc2,w,c
  1493  0014B0  E001               	bz	l1327
  1494  0014B2  D004               	goto	l1331
  1495  0014B4                     l1327:
  1496                           
  1497                           ;serial.c: 155: {
  1498                           ;serial.c: 156: bcc ^= 0x10;
  1499  0014B4  0E10               	movlw	16
  1500  0014B6  1A1E               	xorwf	serial_send_package@bcc,f,c
  1501                           
  1502                           ;serial.c: 157: serial_send_data(0x10);
  1503  0014B8  EC4C  F00C         	call	_serial_send_data
  1504  0014BC                     l1331:
  1505                           
  1506                           ;serial.c: 158: }
  1507                           ;serial.c: 160: bcc ^= buff[i];
  1508  0014BC  501F               	movf	serial_send_package@i,w,c
  1509  0014BE  0D01               	mullw	1
  1510  0014C0  50F3               	movf	prodl,w,c
  1511  0014C2  241A               	addwf	serial_send_package@buff,w,c
  1512  0014C4  6ED9               	movwf	fsr2l,c
  1513  0014C6  50F4               	movf	prodh,w,c
  1514  0014C8  201B               	addwfc	serial_send_package@buff+1,w,c
  1515  0014CA  6EDA               	movwf	fsr2h,c
  1516  0014CC  50DF               	movf	indf2,w,c
  1517  0014CE  1A1E               	xorwf	serial_send_package@bcc,f,c
  1518                           
  1519                           ;serial.c: 161: serial_send_data(buff[i]);
  1520  0014D0  501F               	movf	serial_send_package@i,w,c
  1521  0014D2  0D01               	mullw	1
  1522  0014D4  50F3               	movf	prodl,w,c
  1523  0014D6  241A               	addwf	serial_send_package@buff,w,c
  1524  0014D8  6ED9               	movwf	fsr2l,c
  1525  0014DA  50F4               	movf	prodh,w,c
  1526  0014DC  201B               	addwfc	serial_send_package@buff+1,w,c
  1527  0014DE  6EDA               	movwf	fsr2h,c
  1528  0014E0  50DF               	movf	indf2,w,c
  1529  0014E2  EC4C  F00C         	call	_serial_send_data
  1530  0014E6  2A1F               	incf	serial_send_package@i,f,c
  1531  0014E8                     l1335:
  1532  0014E8  501C               	movf	serial_send_package@size,w,c
  1533  0014EA  5C1F               	subwf	serial_send_package@i,w,c
  1534  0014EC  E201               	bc	l1337
  1535  0014EE  D7C1               	goto	l1321
  1536  0014F0                     l1337:
  1537                           
  1538                           ;serial.c: 162: }
  1539                           ;serial.c: 164: if (bcc == 0x01 || bcc == 0x04 || bcc == 0x10)
  1540  0014F0  041E               	decf	serial_send_package@bcc,w,c
  1541  0014F2  E007               	bz	l1343
  1542  0014F4  0E04               	movlw	4
  1543  0014F6  181E               	xorwf	serial_send_package@bcc,w,c
  1544  0014F8  E004               	bz	l1343
  1545  0014FA  0E10               	movlw	16
  1546  0014FC  181E               	xorwf	serial_send_package@bcc,w,c
  1547  0014FE  E001               	bz	l1343
  1548  001500  D003               	goto	l1345
  1549  001502                     l1343:
  1550                           
  1551                           ;serial.c: 165: {
  1552                           ;serial.c: 167: serial_send_data(0x10);
  1553  001502  0E10               	movlw	16
  1554  001504  EC4C  F00C         	call	_serial_send_data
  1555  001508                     l1345:
  1556                           
  1557                           ;serial.c: 168: }
  1558                           ;serial.c: 169: serial_send_data(bcc);
  1559  001508  501E               	movf	serial_send_package@bcc,w,c
  1560  00150A  EC4C  F00C         	call	_serial_send_data
  1561                           
  1562                           ;serial.c: 170: serial_send_data(0x04);
  1563  00150E  0E04               	movlw	4
  1564  001510  EF4C  F00C         	goto	_serial_send_data
  1565  001514                     __end_of_serial_send_package:
  1566                           	opt stack 0
  1567                           tblptru	equ	0xFF8
  1568                           tblptrh	equ	0xFF7
  1569                           tblptrl	equ	0xFF6
  1570                           tablat	equ	0xFF5
  1571                           prodh	equ	0xFF4
  1572                           prodl	equ	0xFF3
  1573                           intcon	equ	0xFF2
  1574                           postinc0	equ	0xFEE
  1575                           wreg	equ	0xFE8
  1576                           postdec1	equ	0xFE5
  1577                           plusw1	equ	0xFE3
  1578                           fsr1l	equ	0xFE1
  1579                           indf2	equ	0xFDF
  1580                           postinc2	equ	0xFDE
  1581                           plusw2	equ	0xFDB
  1582                           fsr2h	equ	0xFDA
  1583                           fsr2l	equ	0xFD9
  1584                           status	equ	0xFD8
  1585                           
  1586 ;; *************** function _serial_send_data *****************
  1587 ;; Defined at:
  1588 ;;		line 140 in file "C:/Users/F.ArGe/Desktop/deneme/node1.X/serial.c"
  1589 ;; Parameters:    Size  Location     Type
  1590 ;;  data            1    wreg     unsigned char 
  1591 ;; Auto vars:     Size  Location     Type
  1592 ;;  data            1   24[COMRAM] unsigned char 
  1593 ;; Return value:  Size  Location     Type
  1594 ;;                  1    wreg      void 
  1595 ;; Registers used:
  1596 ;;		wreg
  1597 ;; Tracked objects:
  1598 ;;		On entry : 0/0
  1599 ;;		On exit  : 0/0
  1600 ;;		Unchanged: 0/0
  1601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1603 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1605 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1606 ;;Total ram usage:        1 bytes
  1607 ;; Hardware stack levels used:    1
  1608 ;; Hardware stack levels required when called:    4
  1609 ;; This function calls:
  1610 ;;		Nothing
  1611 ;; This function is called by:
  1612 ;;		_serial_send_package
  1613 ;; This function uses a non-reentrant model
  1614 ;;
  1615                           
  1616                           	psect	text7
  1617  001898                     __ptext7:
  1618                           	opt stack 0
  1619  001898                     _serial_send_data:
  1620                           	opt stack 23
  1621                           
  1622                           ;incstack = 0
  1623                           ;serial_send_data@data stored from wreg
  1624  001898  6E19               	movwf	serial_send_data@data,c
  1625  00189A                     l99:
  1626  00189A  A2AC               	btfss	4012,1,c	;volatile
  1627  00189C  D7FE               	goto	l99
  1628                           
  1629                           ;serial.c: 143: TX1REG = data;
  1630  00189E  C019  FFAD         	movff	serial_send_data@data,4013	;volatile
  1631  0018A2  0012               	return		;funcret
  1632  0018A4                     __end_of_serial_send_data:
  1633                           	opt stack 0
  1634                           tblptru	equ	0xFF8
  1635                           tblptrh	equ	0xFF7
  1636                           tblptrl	equ	0xFF6
  1637                           tablat	equ	0xFF5
  1638                           prodh	equ	0xFF4
  1639                           prodl	equ	0xFF3
  1640                           intcon	equ	0xFF2
  1641                           postinc0	equ	0xFEE
  1642                           wreg	equ	0xFE8
  1643                           postdec1	equ	0xFE5
  1644                           plusw1	equ	0xFE3
  1645                           fsr1l	equ	0xFE1
  1646                           indf2	equ	0xFDF
  1647                           postinc2	equ	0xFDE
  1648                           plusw2	equ	0xFDB
  1649                           fsr2h	equ	0xFDA
  1650                           fsr2l	equ	0xFD9
  1651                           status	equ	0xFD8
  1652                           
  1653 ;; *************** function _reset_serial_com *****************
  1654 ;; Defined at:
  1655 ;;		line 50 in file "C:/Users/F.ArGe/Desktop/deneme/node1.X/serial.c"
  1656 ;; Parameters:    Size  Location     Type
  1657 ;;		None
  1658 ;; Auto vars:     Size  Location     Type
  1659 ;;		None
  1660 ;; Return value:  Size  Location     Type
  1661 ;;                  1    wreg      void 
  1662 ;; Registers used:
  1663 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1664 ;; Tracked objects:
  1665 ;;		On entry : 0/0
  1666 ;;		On exit  : 0/0
  1667 ;;		Unchanged: 0/0
  1668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1672 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1673 ;;Total ram usage:        0 bytes
  1674 ;; Hardware stack levels used:    1
  1675 ;; Hardware stack levels required when called:    5
  1676 ;; This function calls:
  1677 ;;		_memset
  1678 ;; This function is called by:
  1679 ;;		_serial_rx_process
  1680 ;; This function uses a non-reentrant model
  1681 ;;
  1682                           
  1683                           	psect	text8
  1684  001838                     __ptext8:
  1685                           	opt stack 0
  1686  001838                     _reset_serial_com:
  1687                           	opt stack 24
  1688                           
  1689                           ;serial.c: 52: memset(serial.buffer, 0x00, serial.index);
  1690                           
  1691                           ;incstack = 0
  1692  001838  0E00               	movlw	low _serial
  1693  00183A  6E19               	movwf	memset@p1,c
  1694  00183C  0E01               	movlw	high _serial
  1695  00183E  6E1A               	movwf	memset@p1+1,c
  1696  001840  6A1C               	clrf	memset@c+1,c
  1697  001842  6A1B               	clrf	memset@c,c
  1698  001844  C180  F01D         	movff	_serial+128,memset@n
  1699  001848  6A1E               	clrf	memset@n+1,c
  1700  00184A  ECCE  F00B         	call	_memset	;wreg free
  1701                           
  1702                           ;serial.c: 53: serial.index = 0;
  1703  00184E  0101               	movlb	1	; () banked
  1704  001850  6B80               	clrf	(_serial+128)& (0+255),b
  1705                           
  1706                           ; BSR set to: 1
  1707                           ;serial.c: 54: serial.bcc = 0;
  1708  001852  6B81               	clrf	(_serial+129)& (0+255),b
  1709                           
  1710                           ; BSR set to: 1
  1711                           ;serial.c: 55: serial.com_state = COM_STATE_IDLE;
  1712  001854  6B82               	clrf	(_serial+130)& (0+255),b
  1713                           
  1714                           ; BSR set to: 1
  1715  001856  0C00               	retlw	0	;funcret
  1716  001858                     __end_of_reset_serial_com:
  1717                           	opt stack 0
  1718                           tblptru	equ	0xFF8
  1719                           tblptrh	equ	0xFF7
  1720                           tblptrl	equ	0xFF6
  1721                           tablat	equ	0xFF5
  1722                           prodh	equ	0xFF4
  1723                           prodl	equ	0xFF3
  1724                           intcon	equ	0xFF2
  1725                           postinc0	equ	0xFEE
  1726                           wreg	equ	0xFE8
  1727                           postdec1	equ	0xFE5
  1728                           plusw1	equ	0xFE3
  1729                           fsr1l	equ	0xFE1
  1730                           indf2	equ	0xFDF
  1731                           postinc2	equ	0xFDE
  1732                           plusw2	equ	0xFDB
  1733                           fsr2h	equ	0xFDA
  1734                           fsr2l	equ	0xFD9
  1735                           status	equ	0xFD8
  1736                           
  1737 ;; *************** function _memset *****************
  1738 ;; Defined at:
  1739 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\memset.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;  p1              2   24[COMRAM] PTR void 
  1742 ;;		 -> serial(131), 
  1743 ;;  c               2   26[COMRAM] int 
  1744 ;;  n               2   28[COMRAM] unsigned int 
  1745 ;; Auto vars:     Size  Location     Type
  1746 ;;  p               2   30[COMRAM] PTR unsigned char 
  1747 ;;		 -> serial(131), 
  1748 ;; Return value:  Size  Location     Type
  1749 ;;                  2   24[COMRAM] PTR void 
  1750 ;; Registers used:
  1751 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1752 ;; Tracked objects:
  1753 ;;		On entry : 0/0
  1754 ;;		On exit  : 0/0
  1755 ;;		Unchanged: 0/0
  1756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1757 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1758 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1760 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1761 ;;Total ram usage:        8 bytes
  1762 ;; Hardware stack levels used:    1
  1763 ;; Hardware stack levels required when called:    4
  1764 ;; This function calls:
  1765 ;;		Nothing
  1766 ;; This function is called by:
  1767 ;;		_reset_serial_com
  1768 ;; This function uses a non-reentrant model
  1769 ;;
  1770                           
  1771                           	psect	text9
  1772  00179C                     __ptext9:
  1773                           	opt stack 0
  1774  00179C                     _memset:
  1775                           	opt stack 24
  1776                           
  1777                           ; BSR set to: 1
  1778                           ;incstack = 0
  1779  00179C  C019  F01F         	movff	memset@p1,memset@p
  1780  0017A0  C01A  F020         	movff	memset@p1+1,memset@p+1
  1781  0017A4  D008               	goto	l1313
  1782  0017A6                     l1309:
  1783  0017A6  C01F  FFD9         	movff	memset@p,fsr2l
  1784  0017AA  C020  FFDA         	movff	memset@p+1,fsr2h
  1785  0017AE  C01B  FFDF         	movff	memset@c,indf2
  1786  0017B2  4A1F               	infsnz	memset@p,f,c
  1787  0017B4  2A20               	incf	memset@p+1,f,c
  1788  0017B6                     l1313:
  1789  0017B6  061D               	decf	memset@n,f,c
  1790  0017B8  A0D8               	btfss	status,0,c
  1791  0017BA  061E               	decf	memset@n+1,f,c
  1792  0017BC  281D               	incf	memset@n,w,c
  1793  0017BE  E1F3               	bnz	l1309
  1794  0017C0  281E               	incf	memset@n+1,w,c
  1795  0017C2  E1F1               	bnz	l1309
  1796  0017C4  0012               	return	
  1797  0017C6                     __end_of_memset:
  1798                           	opt stack 0
  1799                           tblptru	equ	0xFF8
  1800                           tblptrh	equ	0xFF7
  1801                           tblptrl	equ	0xFF6
  1802                           tablat	equ	0xFF5
  1803                           prodh	equ	0xFF4
  1804                           prodl	equ	0xFF3
  1805                           intcon	equ	0xFF2
  1806                           postinc0	equ	0xFEE
  1807                           wreg	equ	0xFE8
  1808                           postdec1	equ	0xFE5
  1809                           plusw1	equ	0xFE3
  1810                           fsr1l	equ	0xFE1
  1811                           indf2	equ	0xFDF
  1812                           postinc2	equ	0xFDE
  1813                           plusw2	equ	0xFDB
  1814                           fsr2h	equ	0xFDA
  1815                           fsr2l	equ	0xFD9
  1816                           status	equ	0xFD8
  1817                           
  1818 ;; *************** function _my_memcmp *****************
  1819 ;; Defined at:
  1820 ;;		line 36 in file "C:/Users/F.ArGe/Desktop/deneme/node1.X/serial.c"
  1821 ;; Parameters:    Size  Location     Type
  1822 ;;  Ptr1            2   24[COMRAM] PTR const void 
  1823 ;;		 -> serial.buffer(128), serial(131), 
  1824 ;;  Ptr2            2   26[COMRAM] PTR const void 
  1825 ;;		 -> serial_rx_process@get_info(9), serial_rx_process@led1_off(9), serial_rx_process@led1_on(8), 
  1826 ;;  Count           2   28[COMRAM] unsigned int 
  1827 ;; Auto vars:     Size  Location     Type
  1828 ;;  p2              2   33[COMRAM] PTR unsigned char 
  1829 ;;		 -> serial_rx_process@get_info(9), serial_rx_process@led1_off(9), serial_rx_process@led1_on(8), 
  1830 ;;  p1              2   31[COMRAM] PTR unsigned char 
  1831 ;;		 -> serial.buffer(128), serial(131), 
  1832 ;;  v               1   35[COMRAM] unsigned char 
  1833 ;; Return value:  Size  Location     Type
  1834 ;;                  1    wreg      unsigned char 
  1835 ;; Registers used:
  1836 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1837 ;; Tracked objects:
  1838 ;;		On entry : 0/0
  1839 ;;		On exit  : 0/0
  1840 ;;		Unchanged: 0/0
  1841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1842 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1843 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1844 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1845 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1846 ;;Total ram usage:       12 bytes
  1847 ;; Hardware stack levels used:    1
  1848 ;; Hardware stack levels required when called:    4
  1849 ;; This function calls:
  1850 ;;		Nothing
  1851 ;; This function is called by:
  1852 ;;		_serial_rx_process
  1853 ;; This function uses a non-reentrant model
  1854 ;;
  1855                           
  1856                           	psect	text10
  1857  00169C                     __ptext10:
  1858                           	opt stack 0
  1859  00169C                     _my_memcmp:
  1860                           	opt stack 25
  1861                           
  1862                           ;serial.c: 38: char v = 0;
  1863                           
  1864                           ;incstack = 0
  1865  00169C  6A24               	clrf	my_memcmp@v,c
  1866                           
  1867                           ;serial.c: 39: char *p1 = (char *) Ptr1;
  1868  00169E  C019  F020         	movff	my_memcmp@Ptr1,my_memcmp@p1
  1869  0016A2  C01A  F021         	movff	my_memcmp@Ptr1+1,my_memcmp@p1+1
  1870                           
  1871                           ;serial.c: 40: char *p2 = (char *) Ptr2;
  1872  0016A6  C01B  F022         	movff	my_memcmp@Ptr2,my_memcmp@p2
  1873  0016AA  C01C  F023         	movff	my_memcmp@Ptr2+1,my_memcmp@p2+1
  1874                           
  1875                           ;serial.c: 42: while (Count-- > 0 && v == 0)
  1876  0016AE  D012               	goto	l1369
  1877  0016B0                     l1363:
  1878                           
  1879                           ;serial.c: 43: {
  1880                           ;serial.c: 44: v = *(p1++) - *(p2++);
  1881  0016B0  C020  FFD9         	movff	my_memcmp@p1,fsr2l
  1882  0016B4  C021  FFDA         	movff	my_memcmp@p1+1,fsr2h
  1883  0016B8  50DF               	movf	indf2,w,c
  1884  0016BA  6E1F               	movwf	??_my_memcmp& (0+255),c
  1885  0016BC  C022  FFD9         	movff	my_memcmp@p2,fsr2l
  1886  0016C0  C023  FFDA         	movff	my_memcmp@p2+1,fsr2h
  1887  0016C4  50DF               	movf	indf2,w,c
  1888  0016C6  0800               	sublw	0
  1889  0016C8  241F               	addwf	??_my_memcmp,w,c
  1890  0016CA  6E24               	movwf	my_memcmp@v,c
  1891  0016CC  4A22               	infsnz	my_memcmp@p2,f,c
  1892  0016CE  2A23               	incf	my_memcmp@p2+1,f,c
  1893  0016D0  4A20               	infsnz	my_memcmp@p1,f,c
  1894  0016D2  2A21               	incf	my_memcmp@p1+1,f,c
  1895  0016D4                     l1369:
  1896  0016D4  061D               	decf	my_memcmp@Count,f,c
  1897  0016D6  A0D8               	btfss	status,0,c
  1898  0016D8  061E               	decf	my_memcmp@Count+1,f,c
  1899  0016DA  281D               	incf	my_memcmp@Count,w,c
  1900  0016DC  E102               	bnz	u790
  1901  0016DE  281E               	incf	my_memcmp@Count+1,w,c
  1902  0016E0  E003               	bz	l1373
  1903  0016E2                     u790:
  1904  0016E2  5024               	movf	my_memcmp@v,w,c
  1905  0016E4  E101               	bnz	l1373
  1906  0016E6  D7E4               	goto	l1363
  1907  0016E8                     l1373:
  1908                           
  1909                           ;serial.c: 45: }
  1910                           ;serial.c: 47: return v;
  1911  0016E8  5024               	movf	my_memcmp@v,w,c
  1912  0016EA  0012               	return	
  1913  0016EC                     __end_of_my_memcmp:
  1914                           	opt stack 0
  1915                           tblptru	equ	0xFF8
  1916                           tblptrh	equ	0xFF7
  1917                           tblptrl	equ	0xFF6
  1918                           tablat	equ	0xFF5
  1919                           prodh	equ	0xFF4
  1920                           prodl	equ	0xFF3
  1921                           intcon	equ	0xFF2
  1922                           postinc0	equ	0xFEE
  1923                           wreg	equ	0xFE8
  1924                           postdec1	equ	0xFE5
  1925                           plusw1	equ	0xFE3
  1926                           fsr1l	equ	0xFE1
  1927                           indf2	equ	0xFDF
  1928                           postinc2	equ	0xFDE
  1929                           plusw2	equ	0xFDB
  1930                           fsr2h	equ	0xFDA
  1931                           fsr2l	equ	0xFD9
  1932                           status	equ	0xFD8
  1933                           
  1934 ;; *************** function _is_package_ready *****************
  1935 ;; Defined at:
  1936 ;;		line 173 in file "C:/Users/F.ArGe/Desktop/deneme/node1.X/serial.c"
  1937 ;; Parameters:    Size  Location     Type
  1938 ;;		None
  1939 ;; Auto vars:     Size  Location     Type
  1940 ;;		None
  1941 ;; Return value:  Size  Location     Type
  1942 ;;                  1    wreg      unsigned char 
  1943 ;; Registers used:
  1944 ;;		wreg, status,2, status,0
  1945 ;; Tracked objects:
  1946 ;;		On entry : 0/0
  1947 ;;		On exit  : 0/0
  1948 ;;		Unchanged: 0/0
  1949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1954 ;;Total ram usage:        0 bytes
  1955 ;; Hardware stack levels used:    1
  1956 ;; Hardware stack levels required when called:    4
  1957 ;; This function calls:
  1958 ;;		Nothing
  1959 ;; This function is called by:
  1960 ;;		_serial_rx_process
  1961 ;; This function uses a non-reentrant model
  1962 ;;
  1963                           
  1964                           	psect	text11
  1965  0018A4                     __ptext11:
  1966                           	opt stack 0
  1967  0018A4                     _is_package_ready:
  1968                           	opt stack 25
  1969                           
  1970                           ;serial.c: 175: if (serial.com_state != COM_STATE_PACKAGE_READY)
  1971                           
  1972                           ;incstack = 0
  1973  0018A4  0E04               	movlw	4
  1974  0018A6  0101               	movlb	1	; () banked
  1975  0018A8  1982               	xorwf	(_serial+130)& (0+255),w,b
  1976  0018AA  B4D8               	btfsc	status,2,c
  1977                           
  1978                           ; BSR set to: 1
  1979                           ;serial.c: 177: return 1;
  1980                           
  1981                           ; BSR set to: 1
  1982                           
  1983                           ; BSR set to: 1
  1984                           
  1985                           ; BSR set to: 1
  1986                           ;serial.c: 176: return 0;
  1987  0018AC  0C01               	retlw	1
  1988                           
  1989                           ; BSR set to: 1
  1990                           
  1991                           ; BSR set to: 1
  1992  0018AE  0C00               	retlw	0	;funcret
  1993  0018B0                     __end_of_is_package_ready:
  1994                           	opt stack 0
  1995                           tblptru	equ	0xFF8
  1996                           tblptrh	equ	0xFF7
  1997                           tblptrl	equ	0xFF6
  1998                           tablat	equ	0xFF5
  1999                           prodh	equ	0xFF4
  2000                           prodl	equ	0xFF3
  2001                           intcon	equ	0xFF2
  2002                           postinc0	equ	0xFEE
  2003                           wreg	equ	0xFE8
  2004                           postdec1	equ	0xFE5
  2005                           plusw1	equ	0xFE3
  2006                           fsr1l	equ	0xFE1
  2007                           indf2	equ	0xFDF
  2008                           postinc2	equ	0xFDE
  2009                           plusw2	equ	0xFDB
  2010                           fsr2h	equ	0xFDA
  2011                           fsr2l	equ	0xFD9
  2012                           status	equ	0xFD8
  2013                           
  2014 ;; *************** function _check_package_bcc *****************
  2015 ;; Defined at:
  2016 ;;		line 117 in file "C:/Users/F.ArGe/Desktop/deneme/node1.X/serial.c"
  2017 ;; Parameters:    Size  Location     Type
  2018 ;;		None
  2019 ;; Auto vars:     Size  Location     Type
  2020 ;;  i               1   55[COMRAM] unsigned char 
  2021 ;;  bcc             1   54[COMRAM] unsigned char 
  2022 ;; Return value:  Size  Location     Type
  2023 ;;                  1    wreg      unsigned char 
  2024 ;; Registers used:
  2025 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2026 ;; Tracked objects:
  2027 ;;		On entry : 0/0
  2028 ;;		On exit  : 0/0
  2029 ;;		Unchanged: 0/0
  2030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2032 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2033 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2034 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2035 ;;Total ram usage:        9 bytes
  2036 ;; Hardware stack levels used:    1
  2037 ;; Hardware stack levels required when called:    6
  2038 ;; This function calls:
  2039 ;;		_printf
  2040 ;; This function is called by:
  2041 ;;		_serial_rx_process
  2042 ;; This function uses a non-reentrant model
  2043 ;;
  2044                           
  2045                           	psect	text12
  2046  00137E                     __ptext12:
  2047                           	opt stack 0
  2048  00137E                     _check_package_bcc:
  2049                           	opt stack 23
  2050                           
  2051                           ;serial.c: 119: uint8_t bcc = 0;
  2052                           
  2053                           ; BSR set to: 1
  2054                           ;incstack = 0
  2055  00137E  6A37               	clrf	check_package_bcc@bcc,c
  2056                           
  2057                           ;serial.c: 121: for (uint8_t i = 0; i < serial.index - 1; i++)
  2058  001380  6A38               	clrf	check_package_bcc@i,c
  2059  001382  D02E               	goto	l1399
  2060  001384                     l1387:
  2061                           
  2062                           ;serial.c: 122: {
  2063                           ;serial.c: 123: if (serial.buffer[i] == 0x01 || serial.buffer[i] == 0x04 || serial.buffe
      +                          r[i] == 0x10)
  2064  001384  5038               	movf	check_package_bcc@i,w,c
  2065  001386  0D01               	mullw	1
  2066  001388  0E00               	movlw	low _serial
  2067  00138A  24F3               	addwf	prodl,w,c
  2068  00138C  6ED9               	movwf	fsr2l,c
  2069  00138E  0E01               	movlw	high _serial
  2070  001390  20F4               	addwfc	prodh,w,c
  2071  001392  6EDA               	movwf	fsr2h,c
  2072  001394  04DE               	decf	postinc2,w,c
  2073  001396  E017               	bz	l1393
  2074  001398  5038               	movf	check_package_bcc@i,w,c
  2075  00139A  0D01               	mullw	1
  2076  00139C  0E00               	movlw	low _serial
  2077  00139E  24F3               	addwf	prodl,w,c
  2078  0013A0  6ED9               	movwf	fsr2l,c
  2079  0013A2  0E01               	movlw	high _serial
  2080  0013A4  20F4               	addwfc	prodh,w,c
  2081  0013A6  6EDA               	movwf	fsr2h,c
  2082  0013A8  0E04               	movlw	4
  2083  0013AA  18DE               	xorwf	postinc2,w,c
  2084  0013AC  E00C               	bz	l1393
  2085  0013AE  5038               	movf	check_package_bcc@i,w,c
  2086  0013B0  0D01               	mullw	1
  2087  0013B2  0E00               	movlw	low _serial
  2088  0013B4  24F3               	addwf	prodl,w,c
  2089  0013B6  6ED9               	movwf	fsr2l,c
  2090  0013B8  0E01               	movlw	high _serial
  2091  0013BA  20F4               	addwfc	prodh,w,c
  2092  0013BC  6EDA               	movwf	fsr2h,c
  2093  0013BE  0E10               	movlw	16
  2094  0013C0  18DE               	xorwf	postinc2,w,c
  2095  0013C2  E001               	bz	l1393
  2096  0013C4  D002               	goto	l1395
  2097  0013C6                     l1393:
  2098                           
  2099                           ;serial.c: 124: bcc ^= 0x10;
  2100  0013C6  0E10               	movlw	16
  2101  0013C8  1A37               	xorwf	check_package_bcc@bcc,f,c
  2102  0013CA                     l1395:
  2103                           
  2104                           ;serial.c: 126: bcc ^= serial.buffer[i];
  2105  0013CA  5038               	movf	check_package_bcc@i,w,c
  2106  0013CC  0D01               	mullw	1
  2107  0013CE  0E00               	movlw	low _serial
  2108  0013D0  24F3               	addwf	prodl,w,c
  2109  0013D2  6ED9               	movwf	fsr2l,c
  2110  0013D4  0E01               	movlw	high _serial
  2111  0013D6  20F4               	addwfc	prodh,w,c
  2112  0013D8  6EDA               	movwf	fsr2h,c
  2113  0013DA  50DF               	movf	indf2,w,c
  2114  0013DC  1A37               	xorwf	check_package_bcc@bcc,f,c
  2115  0013DE  2A38               	incf	check_package_bcc@i,f,c
  2116  0013E0                     l1399:
  2117  0013E0  6830               	setf	??_check_package_bcc& (0+255),c
  2118  0013E2  6831               	setf	(??_check_package_bcc+1)& (0+255),c
  2119  0013E4  0101               	movlb	1	; () banked
  2120  0013E6  5180               	movf	(_serial+128)& (0+255),w,b
  2121  0013E8  6E32               	movwf	(??_check_package_bcc+2)& (0+255),c
  2122  0013EA  6A33               	clrf	(??_check_package_bcc+3)& (0+255),c
  2123  0013EC  5030               	movf	??_check_package_bcc,w,c
  2124  0013EE  2632               	addwf	??_check_package_bcc+2,f,c
  2125  0013F0  5031               	movf	??_check_package_bcc+1,w,c
  2126  0013F2  2233               	addwfc	??_check_package_bcc+3,f,c
  2127  0013F4  5038               	movf	check_package_bcc@i,w,c
  2128  0013F6  6E34               	movwf	(??_check_package_bcc+4)& (0+255),c
  2129  0013F8  6A35               	clrf	(??_check_package_bcc+5)& (0+255),c
  2130  0013FA  5032               	movf	??_check_package_bcc+2,w,c
  2131  0013FC  5C34               	subwf	??_check_package_bcc+4,w,c
  2132  0013FE  5035               	movf	??_check_package_bcc+5,w,c
  2133  001400  0A80               	xorlw	128
  2134  001402  6E36               	movwf	(??_check_package_bcc+6)& (0+255),c
  2135  001404  5033               	movf	??_check_package_bcc+3,w,c
  2136  001406  0A80               	xorlw	128
  2137  001408  5836               	subwfb	(??_check_package_bcc+6)& (0+255),w,c
  2138  00140A  E201               	bc	l1401
  2139  00140C  D7BB               	goto	l1387
  2140  00140E                     l1401:
  2141                           
  2142                           ; BSR set to: 1
  2143                           ;serial.c: 127: }
  2144                           ;serial.c: 129: printf("Hesp. BCC: %x ", bcc);
  2145  00140E  0E96               	movlw	low STR_2
  2146  001410  6E20               	movwf	printf@f,c
  2147  001412  0E10               	movlw	high STR_2
  2148  001414  6E21               	movwf	printf@f+1,c
  2149  001416  C037  F022         	movff	check_package_bcc@bcc,?_printf+2
  2150  00141A  6A23               	clrf	?_printf+3,c
  2151  00141C  EC69  F008         	call	_printf	;wreg free
  2152                           
  2153                           ;serial.c: 130: serial.bcc = bcc;
  2154  001420  C037  F181         	movff	check_package_bcc@bcc,_serial+129
  2155                           
  2156                           ;serial.c: 131: if (bcc != serial.buffer[serial.index - 1])
  2157  001424  6830               	setf	??_check_package_bcc& (0+255),c
  2158  001426  6831               	setf	(??_check_package_bcc+1)& (0+255),c
  2159  001428  0101               	movlb	1	; () banked
  2160  00142A  5180               	movf	(_serial+128)& (0+255),w,b
  2161  00142C  6E32               	movwf	(??_check_package_bcc+2)& (0+255),c
  2162  00142E  6A33               	clrf	(??_check_package_bcc+3)& (0+255),c
  2163  001430  5030               	movf	??_check_package_bcc,w,c
  2164  001432  2632               	addwf	??_check_package_bcc+2,f,c
  2165  001434  5031               	movf	??_check_package_bcc+1,w,c
  2166  001436  2233               	addwfc	??_check_package_bcc+3,f,c
  2167  001438  0E00               	movlw	low _serial
  2168  00143A  2432               	addwf	??_check_package_bcc+2,w,c
  2169  00143C  6ED9               	movwf	fsr2l,c
  2170  00143E  0E01               	movlw	high _serial
  2171  001440  2033               	addwfc	??_check_package_bcc+3,w,c
  2172  001442  6EDA               	movwf	fsr2h,c
  2173  001444  5037               	movf	check_package_bcc@bcc,w,c
  2174  001446  18DE               	xorwf	postinc2,w,c
  2175  001448  E007               	bz	l1413
  2176                           
  2177                           ; BSR set to: 1
  2178                           ;serial.c: 132: {
  2179                           ;serial.c: 133: printf(" ERR.\r\n");
  2180  00144A  0EBA               	movlw	low STR_3
  2181  00144C  6E20               	movwf	printf@f,c
  2182  00144E  0E10               	movlw	high STR_3
  2183  001450  6E21               	movwf	printf@f+1,c
  2184  001452  EC69  F008         	call	_printf	;wreg free
  2185                           
  2186                           ;serial.c: 134: return 0;
  2187  001456  0C00               	retlw	0
  2188  001458                     l1413:
  2189                           
  2190                           ;serial.c: 135: }
  2191                           ;serial.c: 136: printf(" OK.\r\n");
  2192  001458  0EC9               	movlw	low STR_4
  2193  00145A  6E20               	movwf	printf@f,c
  2194  00145C  0E10               	movlw	high STR_4
  2195  00145E  6E21               	movwf	printf@f+1,c
  2196  001460  EC69  F008         	call	_printf	;wreg free
  2197                           
  2198                           ;serial.c: 137: return 1;
  2199  001464  0C01               	retlw	1
  2200  001466                     __end_of_check_package_bcc:
  2201                           	opt stack 0
  2202                           tblptru	equ	0xFF8
  2203                           tblptrh	equ	0xFF7
  2204                           tblptrl	equ	0xFF6
  2205                           tablat	equ	0xFF5
  2206                           prodh	equ	0xFF4
  2207                           prodl	equ	0xFF3
  2208                           intcon	equ	0xFF2
  2209                           postinc0	equ	0xFEE
  2210                           wreg	equ	0xFE8
  2211                           postdec1	equ	0xFE5
  2212                           plusw1	equ	0xFE3
  2213                           fsr1l	equ	0xFE1
  2214                           indf2	equ	0xFDF
  2215                           postinc2	equ	0xFDE
  2216                           plusw2	equ	0xFDB
  2217                           fsr2h	equ	0xFDA
  2218                           fsr2l	equ	0xFD9
  2219                           status	equ	0xFD8
  2220                           
  2221 ;; *************** function _LED1_ON *****************
  2222 ;; Defined at:
  2223 ;;		line 223 in file "C:/Users/F.ArGe/Desktop/deneme/node1.X/serial.c"
  2224 ;; Parameters:    Size  Location     Type
  2225 ;;		None
  2226 ;; Auto vars:     Size  Location     Type
  2227 ;;		None
  2228 ;; Return value:  Size  Location     Type
  2229 ;;                  1    wreg      void 
  2230 ;; Registers used:
  2231 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2232 ;; Tracked objects:
  2233 ;;		On entry : 0/0
  2234 ;;		On exit  : 0/0
  2235 ;;		Unchanged: 0/0
  2236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2241 ;;Total ram usage:        0 bytes
  2242 ;; Hardware stack levels used:    1
  2243 ;; Hardware stack levels required when called:    6
  2244 ;; This function calls:
  2245 ;;		_printf
  2246 ;; This function is called by:
  2247 ;;		_serial_rx_process
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251                           	psect	text13
  2252  001878                     __ptext13:
  2253                           	opt stack 0
  2254  001878                     _LED1_ON:
  2255                           	opt stack 23
  2256                           
  2257                           ;serial.c: 225: printf("LED1_ON\r\n");
  2258                           
  2259                           ;incstack = 0
  2260  001878  0EB0               	movlw	low STR_7
  2261  00187A  6E20               	movwf	printf@f,c
  2262  00187C  0E10               	movlw	high STR_7
  2263  00187E  6E21               	movwf	printf@f+1,c
  2264  001880  EC69  F008         	call	_printf	;wreg free
  2265                           
  2266                           ;serial.c: 226: LATB1 = 1;
  2267  001884  828A               	bsf	3978,1,c	;volatile
  2268  001886  0012               	return		;funcret
  2269  001888                     __end_of_LED1_ON:
  2270                           	opt stack 0
  2271                           tblptru	equ	0xFF8
  2272                           tblptrh	equ	0xFF7
  2273                           tblptrl	equ	0xFF6
  2274                           tablat	equ	0xFF5
  2275                           prodh	equ	0xFF4
  2276                           prodl	equ	0xFF3
  2277                           intcon	equ	0xFF2
  2278                           postinc0	equ	0xFEE
  2279                           wreg	equ	0xFE8
  2280                           postdec1	equ	0xFE5
  2281                           plusw1	equ	0xFE3
  2282                           fsr1l	equ	0xFE1
  2283                           indf2	equ	0xFDF
  2284                           postinc2	equ	0xFDE
  2285                           plusw2	equ	0xFDB
  2286                           fsr2h	equ	0xFDA
  2287                           fsr2l	equ	0xFD9
  2288                           status	equ	0xFD8
  2289                           
  2290 ;; *************** function _LED1_OFF *****************
  2291 ;; Defined at:
  2292 ;;		line 229 in file "C:/Users/F.ArGe/Desktop/deneme/node1.X/serial.c"
  2293 ;; Parameters:    Size  Location     Type
  2294 ;;		None
  2295 ;; Auto vars:     Size  Location     Type
  2296 ;;		None
  2297 ;; Return value:  Size  Location     Type
  2298 ;;                  1    wreg      void 
  2299 ;; Registers used:
  2300 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2301 ;; Tracked objects:
  2302 ;;		On entry : 0/0
  2303 ;;		On exit  : 0/0
  2304 ;;		Unchanged: 0/0
  2305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2310 ;;Total ram usage:        0 bytes
  2311 ;; Hardware stack levels used:    1
  2312 ;; Hardware stack levels required when called:    6
  2313 ;; This function calls:
  2314 ;;		_printf
  2315 ;; This function is called by:
  2316 ;;		_serial_rx_process
  2317 ;; This function uses a non-reentrant model
  2318 ;;
  2319                           
  2320                           	psect	text14
  2321  001888                     __ptext14:
  2322                           	opt stack 0
  2323  001888                     _LED1_OFF:
  2324                           	opt stack 23
  2325                           
  2326                           ;serial.c: 231: printf("LED1_OFF\r\n");
  2327                           
  2328                           ;incstack = 0
  2329  001888  0EA5               	movlw	low STR_8
  2330  00188A  6E20               	movwf	printf@f,c
  2331  00188C  0E10               	movlw	high STR_8
  2332  00188E  6E21               	movwf	printf@f+1,c
  2333  001890  EC69  F008         	call	_printf	;wreg free
  2334                           
  2335                           ;serial.c: 232: LATB1 = 0;
  2336  001894  928A               	bcf	3978,1,c	;volatile
  2337  001896  0012               	return		;funcret
  2338  001898                     __end_of_LED1_OFF:
  2339                           	opt stack 0
  2340                           tblptru	equ	0xFF8
  2341                           tblptrh	equ	0xFF7
  2342                           tblptrl	equ	0xFF6
  2343                           tablat	equ	0xFF5
  2344                           prodh	equ	0xFF4
  2345                           prodl	equ	0xFF3
  2346                           intcon	equ	0xFF2
  2347                           postinc0	equ	0xFEE
  2348                           wreg	equ	0xFE8
  2349                           postdec1	equ	0xFE5
  2350                           plusw1	equ	0xFE3
  2351                           fsr1l	equ	0xFE1
  2352                           indf2	equ	0xFDF
  2353                           postinc2	equ	0xFDE
  2354                           plusw2	equ	0xFDB
  2355                           fsr2h	equ	0xFDA
  2356                           fsr2l	equ	0xFD9
  2357                           status	equ	0xFD8
  2358                           
  2359 ;; *************** function _printf *****************
  2360 ;; Defined at:
  2361 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\doprnt.c"
  2362 ;; Parameters:    Size  Location     Type
  2363 ;;  f               2   31[COMRAM] PTR const unsigned char 
  2364 ;;		 -> STR_8(11), STR_7(10), STR_6(26), STR_5(31), 
  2365 ;;		 -> STR_4(7), STR_3(8), STR_2(15), STR_1(25), 
  2366 ;; Auto vars:     Size  Location     Type
  2367 ;;  idx             1   38[COMRAM] unsigned char 
  2368 ;;  tmpval          4    0        struct .
  2369 ;;  cp              2   44[COMRAM] PTR const unsigned char 
  2370 ;;		 -> STR_9(7), serial.buffer(128), serial(131), 
  2371 ;;  ap              2   42[COMRAM] PTR void [1]
  2372 ;;		 -> ?_printf(2), 
  2373 ;;  val             2   39[COMRAM] unsigned int 
  2374 ;;  len             2    0        unsigned int 
  2375 ;;  c               1   46[COMRAM] char 
  2376 ;;  prec            1   41[COMRAM] char 
  2377 ;;  flag            1   37[COMRAM] unsigned char 
  2378 ;; Return value:  Size  Location     Type
  2379 ;;                  2   31[COMRAM] int 
  2380 ;; Registers used:
  2381 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2382 ;; Tracked objects:
  2383 ;;		On entry : 0/0
  2384 ;;		On exit  : 0/0
  2385 ;;		Unchanged: 0/0
  2386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2387 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2388 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2390 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2391 ;;Total ram usage:       16 bytes
  2392 ;; Hardware stack levels used:    1
  2393 ;; Hardware stack levels required when called:    5
  2394 ;; This function calls:
  2395 ;;		___lwdiv
  2396 ;;		_putch
  2397 ;; This function is called by:
  2398 ;;		_main
  2399 ;;		_check_package_bcc
  2400 ;;		_serial_rx_process
  2401 ;;		_LED1_ON
  2402 ;;		_LED1_OFF
  2403 ;; This function uses a non-reentrant model
  2404 ;;
  2405                           
  2406                           	psect	text15
  2407  0010D2                     __ptext15:
  2408                           	opt stack 0
  2409  0010D2                     _printf:
  2410                           	opt stack 24
  2411                           
  2412                           ;doprnt.c: 466: va_list ap;
  2413                           ;doprnt.c: 499: signed char c;
  2414                           ;doprnt.c: 506: signed char prec;
  2415                           ;doprnt.c: 508: unsigned char flag;
  2416                           ;doprnt.c: 523: union {
  2417                           ;doprnt.c: 524: unsigned long vd;
  2418                           ;doprnt.c: 525: double integ;
  2419                           ;doprnt.c: 526: } tmpval;
  2420                           ;doprnt.c: 528: unsigned int val;
  2421                           ;doprnt.c: 529: unsigned len;
  2422                           ;doprnt.c: 530: const char * cp;
  2423                           ;doprnt.c: 533: *ap = __va_start();
  2424                           
  2425                           ;incstack = 0
  2426  0010D2  0E22               	movlw	low (?_printf+2)
  2427  0010D4  6E2B               	movwf	printf@ap,c
  2428  0010D6  0E00               	movlw	high (?_printf+2)
  2429  0010D8  6E2C               	movwf	printf@ap+1,c
  2430                           
  2431                           ;doprnt.c: 536: while(c = *f++) {
  2432  0010DA  D0AE               	goto	l1305
  2433  0010DC                     l1255:
  2434                           
  2435                           ;doprnt.c: 538: if(c != '%')
  2436  0010DC  0E25               	movlw	37
  2437  0010DE  182F               	xorwf	printf@c,w,c
  2438  0010E0  E004               	bz	l1259
  2439                           
  2440                           ;doprnt.c: 540: {
  2441                           ;doprnt.c: 541: (putch(c) );
  2442  0010E2  502F               	movf	printf@c,w,c
  2443  0010E4  EC58  F00C         	call	_putch
  2444                           
  2445                           ;doprnt.c: 542: continue;
  2446  0010E8  D0A7               	goto	l1305
  2447  0010EA                     l1259:
  2448                           
  2449                           ;doprnt.c: 543: }
  2450                           ;doprnt.c: 548: flag = 0;
  2451  0010EA  6A26               	clrf	printf@flag,c
  2452                           
  2453                           ;doprnt.c: 635: switch(c = *f++) {
  2454  0010EC  D03D               	goto	l1277
  2455  0010EE                     l1261:
  2456                           
  2457                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  2458  0010EE  C02B  FFD9         	movff	printf@ap,fsr2l
  2459  0010F2  C02C  FFDA         	movff	printf@ap+1,fsr2h
  2460  0010F6  CFDE F02D          	movff	postinc2,printf@cp
  2461  0010FA  CFDD F02E          	movff	postdec2,printf@cp+1
  2462  0010FE  0E02               	movlw	2
  2463  001100  262B               	addwf	printf@ap,f,c
  2464  001102  0E00               	movlw	0
  2465  001104  222C               	addwfc	printf@ap+1,f,c
  2466                           
  2467                           ;doprnt.c: 740: if(!cp)
  2468  001106  502D               	movf	printf@cp,w,c
  2469  001108  102E               	iorwf	printf@cp+1,w,c
  2470  00110A  E11A               	bnz	l1273
  2471                           
  2472                           ;doprnt.c: 741: cp = "(null)";
  2473  00110C  0EC2               	movlw	low STR_9
  2474  00110E  6E2D               	movwf	printf@cp,c
  2475  001110  0E10               	movlw	high STR_9
  2476  001112  6E2E               	movwf	printf@cp+1,c
  2477                           
  2478                           ;doprnt.c: 777: while(*cp)
  2479  001114  D015               	goto	l1273
  2480  001116                     l1269:
  2481                           
  2482                           ;doprnt.c: 778: (putch(*cp++) );
  2483  001116  C02D  FFF6         	movff	printf@cp,tblptrl
  2484  00111A  C02E  FFF7         	movff	printf@cp+1,tblptrh
  2485  00111E  0E00               	movlw	low (__smallconst shr (0+16))
  2486  001120  6EF8               	movwf	tblptru,c
  2487  001122  0E0F               	movlw	(high __ramtop+-1)
  2488  001124  64F7               	cpfsgt	tblptrh,c
  2489  001126  D003               	bra	u627
  2490  001128  0008               	tblrd		*
  2491  00112A  50F5               	movf	tablat,w,c
  2492  00112C  D005               	bra	u620
  2493  00112E                     u627:
  2494  00112E  CFF6 FFE9          	movff	tblptrl,fsr0l
  2495  001132  CFF7 FFEA          	movff	tblptrh,fsr0h
  2496  001136  50EF               	movf	indf0,w,c
  2497  001138                     u620:
  2498  001138  EC58  F00C         	call	_putch
  2499  00113C  4A2D               	infsnz	printf@cp,f,c
  2500  00113E  2A2E               	incf	printf@cp+1,f,c
  2501  001140                     l1273:
  2502  001140  C02D  FFF6         	movff	printf@cp,tblptrl
  2503  001144  C02E  FFF7         	movff	printf@cp+1,tblptrh
  2504  001148  0E00               	movlw	low (__smallconst shr (0+16))
  2505  00114A  6EF8               	movwf	tblptru,c
  2506  00114C  0E0F               	movlw	(high __ramtop+-1)
  2507  00114E  64F7               	cpfsgt	tblptrh,c
  2508  001150  D003               	bra	u637
  2509  001152  0008               	tblrd		*
  2510  001154  50F5               	movf	tablat,w,c
  2511  001156  D005               	bra	u630
  2512  001158                     u637:
  2513  001158  CFF6 FFE9          	movff	tblptrl,fsr0l
  2514  00115C  CFF7 FFEA          	movff	tblptrh,fsr0h
  2515  001160  50EF               	movf	indf0,w,c
  2516  001162                     u630:
  2517  001162  0900               	iorlw	0
  2518  001164  E069               	bz	l1305
  2519  001166  D7D7               	goto	l1269
  2520  001168                     l1277:
  2521  001168  C020  FFF6         	movff	printf@f,tblptrl
  2522  00116C  C021  FFF7         	movff	printf@f+1,tblptrh
  2523  001170  4A20               	infsnz	printf@f,f,c
  2524  001172  2A21               	incf	printf@f+1,f,c
  2525  001174                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2526  001174  6AF8               	clrf	tblptru,c
  2527  001176                     	endif
  2528  001176                     	if	0	;tblptru may be non-zero
  2529  001176                     	endif
  2530  001176  0008               	tblrd		*
  2531  001178  CFF5 F02F          	movff	tablat,printf@c
  2532  00117C  502F               	movf	printf@c,w,c
  2533                           
  2534                           ; Switch size 1, requested type "space"
  2535                           ; Number of cases is 3, Range of values is 0 to 120
  2536                           ; switch strategies available:
  2537                           ; Name         Instructions Cycles
  2538                           ; simple_byte           10     6 (average)
  2539                           ;	Chosen strategy is simple_byte
  2540  00117E  B4D8               	btfsc	status,2,c
  2541  001180  0012               	return	
  2542  001182  0A73               	xorlw	115	; case 115
  2543  001184  E0B4               	bz	l1261
  2544  001186  0A0B               	xorlw	11	; case 120
  2545  001188  E157               	bnz	l1305
  2546                           
  2547                           ;doprnt.c: 1273: {
  2548                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2549  00118A  C02B  FFD9         	movff	printf@ap,fsr2l
  2550  00118E  C02C  FFDA         	movff	printf@ap+1,fsr2h
  2551  001192  CFDE F028          	movff	postinc2,printf@val
  2552  001196  CFDD F029          	movff	postdec2,printf@val+1
  2553  00119A  0E02               	movlw	2
  2554  00119C  262B               	addwf	printf@ap,f,c
  2555  00119E  0E00               	movlw	0
  2556  0011A0  222C               	addwfc	printf@ap+1,f,c
  2557                           
  2558                           ;doprnt.c: 1287: }
  2559                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2560  0011A2  0E01               	movlw	1
  2561  0011A4  6E2F               	movwf	printf@c,c
  2562  0011A6                     l1285:
  2563  0011A6  0E04               	movlw	4
  2564  0011A8  182F               	xorwf	printf@c,w,c
  2565  0011AA  E014               	bz	l217
  2566                           
  2567                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2568  0011AC  502F               	movf	printf@c,w,c
  2569  0011AE  0D02               	mullw	2
  2570  0011B0  0E23               	movlw	low _hexpowers
  2571  0011B2  24F3               	addwf	prodl,w,c
  2572  0011B4  6EF6               	movwf	tblptrl,c
  2573  0011B6  0E10               	movlw	high _hexpowers
  2574  0011B8  20F4               	addwfc	prodh,w,c
  2575  0011BA  6EF7               	movwf	tblptrh,c
  2576  0011BC                     	if	1	;There are 3 active tblptr bytes
  2577  0011BC  6AF8               	clrf	tblptru,c
  2578  0011BE  0E00               	movlw	low (__mediumconst shr (0+16))
  2579  0011C0  22F8               	addwfc	tblptru,f,c
  2580  0011C2                     	endif
  2581  0011C2  0009               	tblrd		*+
  2582  0011C4  50F5               	movf	tablat,w,c
  2583  0011C6  5C28               	subwf	printf@val,w,c
  2584  0011C8  0009               	tblrd		*+
  2585  0011CA  50F5               	movf	tablat,w,c
  2586  0011CC  5829               	subwfb	printf@val+1,w,c
  2587  0011CE  E302               	bnc	l217
  2588                           
  2589                           ;doprnt.c: 1318: break;
  2590  0011D0  2A2F               	incf	printf@c,f,c
  2591  0011D2  D7E9               	goto	l1285
  2592  0011D4                     l217:
  2593                           
  2594                           ;doprnt.c: 1422: {
  2595                           ;doprnt.c: 1469: }
  2596                           ;doprnt.c: 1472: prec = c;
  2597  0011D4  C02F  F02A         	movff	printf@c,printf@prec
  2598                           
  2599                           ;doprnt.c: 1474: while(prec--) {
  2600  0011D8  D02B               	goto	l1303
  2601  0011DA                     l1297:
  2602                           
  2603                           ;doprnt.c: 1478: {
  2604                           ;doprnt.c: 1499: {
  2605                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2606  0011DA  C028  F019         	movff	printf@val,___lwdiv@dividend
  2607  0011DE  C029  F01A         	movff	printf@val+1,___lwdiv@dividend+1
  2608  0011E2  502A               	movf	printf@prec,w,c
  2609  0011E4  0D02               	mullw	2
  2610  0011E6  0E23               	movlw	low _hexpowers
  2611  0011E8  24F3               	addwf	prodl,w,c
  2612  0011EA  6EF6               	movwf	tblptrl,c
  2613  0011EC  0E10               	movlw	high _hexpowers
  2614  0011EE  20F4               	addwfc	prodh,w,c
  2615  0011F0  6EF7               	movwf	tblptrh,c
  2616  0011F2                     	if	1	;There are 3 active tblptr bytes
  2617  0011F2  6AF8               	clrf	tblptru,c
  2618  0011F4  0E00               	movlw	low (__mediumconst shr (0+16))
  2619  0011F6  22F8               	addwfc	tblptru,f,c
  2620  0011F8                     	endif
  2621  0011F8  0009               	tblrd		*+
  2622  0011FA  CFF5 F01B          	movff	tablat,___lwdiv@divisor
  2623  0011FE  000A               	tblrd		*-
  2624  001200  CFF5 F01C          	movff	tablat,___lwdiv@divisor+1
  2625  001204  EC76  F00B         	call	___lwdiv	;wreg free
  2626  001208  5019               	movf	?___lwdiv,w,c
  2627  00120A  0B0F               	andlw	15
  2628  00120C  6E27               	movwf	printf@idx,c
  2629                           
  2630                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2631  00120E  5027               	movf	printf@idx,w,c
  2632  001210  0D01               	mullw	1
  2633  001212  0E85               	movlw	low STR_10
  2634  001214  24F3               	addwf	prodl,w,c
  2635  001216  6EF6               	movwf	tblptrl,c
  2636  001218  0E10               	movlw	high STR_10
  2637  00121A  20F4               	addwfc	prodh,w,c
  2638  00121C  6EF7               	movwf	tblptrh,c
  2639  00121E                     	if	1	;There are 3 active tblptr bytes
  2640  00121E  6AF8               	clrf	tblptru,c
  2641  001220  0E00               	movlw	low (__mediumconst shr (0+16))
  2642  001222  22F8               	addwfc	tblptru,f,c
  2643  001224                     	endif
  2644  001224  0008               	tblrd		*
  2645  001226  CFF5 F02F          	movff	tablat,printf@c
  2646                           
  2647                           ;doprnt.c: 1508: }
  2648                           ;doprnt.c: 1523: }
  2649                           ;doprnt.c: 1524: (putch(c) );
  2650  00122A  502F               	movf	printf@c,w,c
  2651  00122C  EC58  F00C         	call	_putch
  2652  001230                     l1303:
  2653  001230  062A               	decf	printf@prec,f,c
  2654  001232  282A               	incf	printf@prec,w,c
  2655  001234  E001               	bz	l1305
  2656  001236  D7D1               	goto	l1297
  2657  001238                     l1305:
  2658  001238  C020  FFF6         	movff	printf@f,tblptrl
  2659  00123C  C021  FFF7         	movff	printf@f+1,tblptrh
  2660  001240  4A20               	infsnz	printf@f,f,c
  2661  001242  2A21               	incf	printf@f+1,f,c
  2662  001244                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2663  001244  6AF8               	clrf	tblptru,c
  2664  001246                     	endif
  2665  001246                     	if	0	;tblptru may be non-zero
  2666  001246                     	endif
  2667  001246  0008               	tblrd		*
  2668  001248  CFF5 F02F          	movff	tablat,printf@c
  2669  00124C  502F               	movf	printf@c,w,c
  2670  00124E  E001 D745          	bnz	l1255
  2671  001252  0012               	return	
  2672  001254                     __end_of_printf:
  2673                           	opt stack 0
  2674                           tblptru	equ	0xFF8
  2675                           tblptrh	equ	0xFF7
  2676                           tblptrl	equ	0xFF6
  2677                           tablat	equ	0xFF5
  2678                           prodh	equ	0xFF4
  2679                           prodl	equ	0xFF3
  2680                           intcon	equ	0xFF2
  2681                           indf0	equ	0xFEF
  2682                           postinc0	equ	0xFEE
  2683                           fsr0h	equ	0xFEA
  2684                           fsr0l	equ	0xFE9
  2685                           wreg	equ	0xFE8
  2686                           postdec1	equ	0xFE5
  2687                           plusw1	equ	0xFE3
  2688                           fsr1l	equ	0xFE1
  2689                           indf2	equ	0xFDF
  2690                           postinc2	equ	0xFDE
  2691                           postdec2	equ	0xFDD
  2692                           plusw2	equ	0xFDB
  2693                           fsr2h	equ	0xFDA
  2694                           fsr2l	equ	0xFD9
  2695                           status	equ	0xFD8
  2696                           
  2697 ;; *************** function _putch *****************
  2698 ;; Defined at:
  2699 ;;		line 35 in file "C:/Users/F.ArGe/Desktop/deneme/node1.X/usart.c"
  2700 ;; Parameters:    Size  Location     Type
  2701 ;;  byte            1    wreg     unsigned char 
  2702 ;; Auto vars:     Size  Location     Type
  2703 ;;  byte            1   24[COMRAM] unsigned char 
  2704 ;; Return value:  Size  Location     Type
  2705 ;;                  1    wreg      void 
  2706 ;; Registers used:
  2707 ;;		wreg
  2708 ;; Tracked objects:
  2709 ;;		On entry : 0/0
  2710 ;;		On exit  : 0/0
  2711 ;;		Unchanged: 0/0
  2712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2714 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2716 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2717 ;;Total ram usage:        1 bytes
  2718 ;; Hardware stack levels used:    1
  2719 ;; Hardware stack levels required when called:    4
  2720 ;; This function calls:
  2721 ;;		Nothing
  2722 ;; This function is called by:
  2723 ;;		_printf
  2724 ;; This function uses a non-reentrant model
  2725 ;;
  2726                           
  2727                           	psect	text16
  2728  0018B0                     __ptext16:
  2729                           	opt stack 0
  2730  0018B0                     _putch:
  2731                           	opt stack 24
  2732                           
  2733                           ;incstack = 0
  2734                           ;putch@byte stored from wreg
  2735  0018B0  6E19               	movwf	putch@byte,c
  2736  0018B2                     l179:
  2737  0018B2  A89E               	btfss	3998,4,c	;volatile
  2738  0018B4  D7FE               	goto	l179
  2739                           
  2740                           ;usart.c: 39: TXREG = byte;
  2741  0018B6  C019  FFAD         	movff	putch@byte,4013	;volatile
  2742  0018BA  0012               	return		;funcret
  2743  0018BC                     __end_of_putch:
  2744                           	opt stack 0
  2745                           tblptru	equ	0xFF8
  2746                           tblptrh	equ	0xFF7
  2747                           tblptrl	equ	0xFF6
  2748                           tablat	equ	0xFF5
  2749                           prodh	equ	0xFF4
  2750                           prodl	equ	0xFF3
  2751                           intcon	equ	0xFF2
  2752                           indf0	equ	0xFEF
  2753                           postinc0	equ	0xFEE
  2754                           fsr0h	equ	0xFEA
  2755                           fsr0l	equ	0xFE9
  2756                           wreg	equ	0xFE8
  2757                           postdec1	equ	0xFE5
  2758                           plusw1	equ	0xFE3
  2759                           fsr1l	equ	0xFE1
  2760                           indf2	equ	0xFDF
  2761                           postinc2	equ	0xFDE
  2762                           postdec2	equ	0xFDD
  2763                           plusw2	equ	0xFDB
  2764                           fsr2h	equ	0xFDA
  2765                           fsr2l	equ	0xFD9
  2766                           status	equ	0xFD8
  2767                           
  2768 ;; *************** function ___lwdiv *****************
  2769 ;; Defined at:
  2770 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\lwdiv.c"
  2771 ;; Parameters:    Size  Location     Type
  2772 ;;  dividend        2   24[COMRAM] unsigned int 
  2773 ;;  divisor         2   26[COMRAM] unsigned int 
  2774 ;; Auto vars:     Size  Location     Type
  2775 ;;  quotient        2   28[COMRAM] unsigned int 
  2776 ;;  counter         1   30[COMRAM] unsigned char 
  2777 ;; Return value:  Size  Location     Type
  2778 ;;                  2   24[COMRAM] unsigned int 
  2779 ;; Registers used:
  2780 ;;		wreg, status,2, status,0
  2781 ;; Tracked objects:
  2782 ;;		On entry : 0/0
  2783 ;;		On exit  : 0/0
  2784 ;;		Unchanged: 0/0
  2785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2786 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2787 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2789 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2790 ;;Total ram usage:        7 bytes
  2791 ;; Hardware stack levels used:    1
  2792 ;; Hardware stack levels required when called:    4
  2793 ;; This function calls:
  2794 ;;		Nothing
  2795 ;; This function is called by:
  2796 ;;		_printf
  2797 ;; This function uses a non-reentrant model
  2798 ;;
  2799                           
  2800                           	psect	text17
  2801  0016EC                     __ptext17:
  2802                           	opt stack 0
  2803  0016EC                     ___lwdiv:
  2804                           	opt stack 24
  2805                           
  2806                           ;incstack = 0
  2807  0016EC  6A1E               	clrf	___lwdiv@quotient+1,c
  2808  0016EE  6A1D               	clrf	___lwdiv@quotient,c
  2809  0016F0  501B               	movf	___lwdiv@divisor,w,c
  2810  0016F2  101C               	iorwf	___lwdiv@divisor+1,w,c
  2811  0016F4  E01B               	bz	l626
  2812  0016F6  0E01               	movlw	1
  2813  0016F8  6E1F               	movwf	___lwdiv@counter,c
  2814  0016FA  D004               	goto	l1239
  2815  0016FC                     l1237:
  2816  0016FC  90D8               	bcf	status,0,c
  2817  0016FE  361B               	rlcf	___lwdiv@divisor,f,c
  2818  001700  361C               	rlcf	___lwdiv@divisor+1,f,c
  2819  001702  2A1F               	incf	___lwdiv@counter,f,c
  2820  001704                     l1239:
  2821  001704  AE1C               	btfss	___lwdiv@divisor+1,7,c
  2822  001706  D7FA               	goto	l1237
  2823  001708                     l1241:
  2824  001708  90D8               	bcf	status,0,c
  2825  00170A  361D               	rlcf	___lwdiv@quotient,f,c
  2826  00170C  361E               	rlcf	___lwdiv@quotient+1,f,c
  2827  00170E  501B               	movf	___lwdiv@divisor,w,c
  2828  001710  5C19               	subwf	___lwdiv@dividend,w,c
  2829  001712  501C               	movf	___lwdiv@divisor+1,w,c
  2830  001714  581A               	subwfb	___lwdiv@dividend+1,w,c
  2831  001716  E305               	bnc	l1249
  2832  001718  501B               	movf	___lwdiv@divisor,w,c
  2833  00171A  5E19               	subwf	___lwdiv@dividend,f,c
  2834  00171C  501C               	movf	___lwdiv@divisor+1,w,c
  2835  00171E  5A1A               	subwfb	___lwdiv@dividend+1,f,c
  2836  001720  801D               	bsf	___lwdiv@quotient,0,c
  2837  001722                     l1249:
  2838  001722  90D8               	bcf	status,0,c
  2839  001724  321C               	rrcf	___lwdiv@divisor+1,f,c
  2840  001726  321B               	rrcf	___lwdiv@divisor,f,c
  2841  001728  2E1F               	decfsz	___lwdiv@counter,f,c
  2842  00172A  D7EE               	goto	l1241
  2843  00172C                     l626:
  2844  00172C  C01D  F019         	movff	___lwdiv@quotient,?___lwdiv
  2845  001730  C01E  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2846  001734  0012               	return		;funcret
  2847  001736                     __end_of___lwdiv:
  2848                           	opt stack 0
  2849                           tblptru	equ	0xFF8
  2850                           tblptrh	equ	0xFF7
  2851                           tblptrl	equ	0xFF6
  2852                           tablat	equ	0xFF5
  2853                           prodh	equ	0xFF4
  2854                           prodl	equ	0xFF3
  2855                           intcon	equ	0xFF2
  2856                           indf0	equ	0xFEF
  2857                           postinc0	equ	0xFEE
  2858                           fsr0h	equ	0xFEA
  2859                           fsr0l	equ	0xFE9
  2860                           wreg	equ	0xFE8
  2861                           postdec1	equ	0xFE5
  2862                           plusw1	equ	0xFE3
  2863                           fsr1l	equ	0xFE1
  2864                           indf2	equ	0xFDF
  2865                           postinc2	equ	0xFDE
  2866                           postdec2	equ	0xFDD
  2867                           plusw2	equ	0xFDB
  2868                           fsr2h	equ	0xFDA
  2869                           fsr2l	equ	0xFD9
  2870                           status	equ	0xFD8
  2871                           
  2872 ;; *************** function _ISR *****************
  2873 ;; Defined at:
  2874 ;;		line 12 in file "C:/Users/F.ArGe/Desktop/deneme/node1.X/main.c"
  2875 ;; Parameters:    Size  Location     Type
  2876 ;;		None
  2877 ;; Auto vars:     Size  Location     Type
  2878 ;;  i               1   23[COMRAM] unsigned char 
  2879 ;; Return value:  Size  Location     Type
  2880 ;;                  1    wreg      void 
  2881 ;; Registers used:
  2882 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2883 ;; Tracked objects:
  2884 ;;		On entry : 0/0
  2885 ;;		On exit  : 0/0
  2886 ;;		Unchanged: 0/0
  2887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2889 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2890 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2891 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2892 ;;Total ram usage:       15 bytes
  2893 ;; Hardware stack levels used:    1
  2894 ;; Hardware stack levels required when called:    3
  2895 ;; This function calls:
  2896 ;;		_serial_interrupt_handler
  2897 ;; This function is called by:
  2898 ;;		Interrupt level 2
  2899 ;; This function uses a non-reentrant model
  2900 ;;
  2901                           
  2902                           	psect	intcode
  2903  000008                     __pintcode:
  2904                           	opt stack 0
  2905  000008                     _ISR:
  2906                           	opt stack 23
  2907                           
  2908                           ;incstack = 0
  2909  000008  8246               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2910  00000A  CFFA F00A          	movff	pclath,??_ISR
  2911  00000E  CFFB F00B          	movff	pclatu,??_ISR+1
  2912  000012  CFE9 F00C          	movff	fsr0l,??_ISR+2
  2913  000016  CFEA F00D          	movff	fsr0h,??_ISR+3
  2914  00001A  CFE1 F00E          	movff	fsr1l,??_ISR+4
  2915  00001E  CFE2 F00F          	movff	fsr1h,??_ISR+5
  2916  000022  CFD9 F010          	movff	fsr2l,??_ISR+6
  2917  000026  CFDA F011          	movff	fsr2h,??_ISR+7
  2918  00002A  CFF3 F012          	movff	prodl,??_ISR+8
  2919  00002E  CFF4 F013          	movff	prodh,??_ISR+9
  2920  000032  CFF6 F014          	movff	tblptrl,??_ISR+10
  2921  000036  CFF7 F015          	movff	tblptrh,??_ISR+11
  2922  00003A  CFF8 F016          	movff	tblptru,??_ISR+12
  2923  00003E  CFF5 F017          	movff	tablat,??_ISR+13
  2924                           
  2925                           ;main.c: 14: char i;
  2926                           ;main.c: 15: (INTCONbits.GIE = 0);
  2927  000042  9EF2               	bcf	intcon,7,c	;volatile
  2928                           
  2929                           ;main.c: 28: if (RC1IF)
  2930  000044  AA9E               	btfss	3998,5,c	;volatile
  2931  000046  D005               	goto	i2l1581
  2932                           
  2933                           ;main.c: 29: {
  2934                           ;main.c: 30: i = RCREG1;
  2935  000048  CFAE F018          	movff	4014,ISR@i	;volatile
  2936                           
  2937                           ;main.c: 32: serial_interrupt_handler(i);
  2938  00004C  5018               	movf	ISR@i,w,c
  2939  00004E  ECCF  F00A         	call	_serial_interrupt_handler
  2940  000052                     i2l1581:
  2941                           
  2942                           ;main.c: 33: }
  2943                           ;main.c: 34: (INTCONbits.GIE = 1);
  2944  000052  8EF2               	bsf	intcon,7,c	;volatile
  2945  000054  C017  FFF5         	movff	??_ISR+13,tablat
  2946  000058  C016  FFF8         	movff	??_ISR+12,tblptru
  2947  00005C  C015  FFF7         	movff	??_ISR+11,tblptrh
  2948  000060  C014  FFF6         	movff	??_ISR+10,tblptrl
  2949  000064  C013  FFF4         	movff	??_ISR+9,prodh
  2950  000068  C012  FFF3         	movff	??_ISR+8,prodl
  2951  00006C  C011  FFDA         	movff	??_ISR+7,fsr2h
  2952  000070  C010  FFD9         	movff	??_ISR+6,fsr2l
  2953  000074  C00F  FFE2         	movff	??_ISR+5,fsr1h
  2954  000078  C00E  FFE1         	movff	??_ISR+4,fsr1l
  2955  00007C  C00D  FFEA         	movff	??_ISR+3,fsr0h
  2956  000080  C00C  FFE9         	movff	??_ISR+2,fsr0l
  2957  000084  C00B  FFFB         	movff	??_ISR+1,pclatu
  2958  000088  C00A  FFFA         	movff	??_ISR,pclath
  2959  00008C  9246               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2960  00008E  0011               	retfie		f
  2961  000090                     __end_of_ISR:
  2962                           	opt stack 0
  2963                           pclatu	equ	0xFFB
  2964                           pclath	equ	0xFFA
  2965                           tblptru	equ	0xFF8
  2966                           tblptrh	equ	0xFF7
  2967                           tblptrl	equ	0xFF6
  2968                           tablat	equ	0xFF5
  2969                           prodh	equ	0xFF4
  2970                           prodl	equ	0xFF3
  2971                           intcon	equ	0xFF2
  2972                           indf0	equ	0xFEF
  2973                           postinc0	equ	0xFEE
  2974                           fsr0h	equ	0xFEA
  2975                           fsr0l	equ	0xFE9
  2976                           wreg	equ	0xFE8
  2977                           postdec1	equ	0xFE5
  2978                           plusw1	equ	0xFE3
  2979                           fsr1h	equ	0xFE2
  2980                           fsr1l	equ	0xFE1
  2981                           indf2	equ	0xFDF
  2982                           postinc2	equ	0xFDE
  2983                           postdec2	equ	0xFDD
  2984                           plusw2	equ	0xFDB
  2985                           fsr2h	equ	0xFDA
  2986                           fsr2l	equ	0xFD9
  2987                           status	equ	0xFD8
  2988                           
  2989 ;; *************** function _serial_interrupt_handler *****************
  2990 ;; Defined at:
  2991 ;;		line 58 in file "C:/Users/F.ArGe/Desktop/deneme/node1.X/serial.c"
  2992 ;; Parameters:    Size  Location     Type
  2993 ;;  data            1    wreg     unsigned char 
  2994 ;; Auto vars:     Size  Location     Type
  2995 ;;  data            1    8[COMRAM] unsigned char 
  2996 ;; Return value:  Size  Location     Type
  2997 ;;                  1    wreg      void 
  2998 ;; Registers used:
  2999 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3000 ;; Tracked objects:
  3001 ;;		On entry : 0/0
  3002 ;;		On exit  : 0/0
  3003 ;;		Unchanged: 0/0
  3004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3006 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3008 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3009 ;;Total ram usage:        1 bytes
  3010 ;; Hardware stack levels used:    1
  3011 ;; Hardware stack levels required when called:    2
  3012 ;; This function calls:
  3013 ;;		i2_reset_serial_com
  3014 ;; This function is called by:
  3015 ;;		_ISR
  3016 ;; This function uses a non-reentrant model
  3017 ;;
  3018                           
  3019                           	psect	text19
  3020  00159E                     __ptext19:
  3021                           	opt stack 0
  3022  00159E                     _serial_interrupt_handler:
  3023                           	opt stack 23
  3024                           
  3025                           ;incstack = 0
  3026                           ;serial_interrupt_handler@data stored from wreg
  3027  00159E  6E09               	movwf	serial_interrupt_handler@data,c
  3028                           
  3029                           ;serial.c: 60: switch (serial.com_state)
  3030  0015A0  D039               	goto	i2l1527
  3031  0015A2                     i2l1473:
  3032                           
  3033                           ;serial.c: 64: if (data == 0x01)
  3034  0015A2  0409               	decf	serial_interrupt_handler@data,w,c
  3035  0015A4  A4D8               	btfss	status,2,c
  3036  0015A6  0012               	return	
  3037                           
  3038                           ;serial.c: 65: serial.com_state = COM_STATE_COLLECT_DATA;
  3039  0015A8  0E01               	movlw	1
  3040  0015AA  0101               	movlb	1	; () banked
  3041  0015AC  6F82               	movwf	(_serial+130)& (0+255),b
  3042                           
  3043                           ; BSR set to: 1
  3044                           ;serial.c: 66: break;
  3045  0015AE  0C01               	retlw	1
  3046  0015B0                     i2l1477:
  3047                           
  3048                           ; BSR set to: 1
  3049                           ;serial.c: 70: serial.buffer[serial.index++] = data;
  3050  0015B0  0101               	movlb	1	; () banked
  3051  0015B2  5180               	movf	(_serial+128)& (0+255),w,b
  3052  0015B4  0D01               	mullw	1
  3053  0015B6  0E00               	movlw	low _serial
  3054  0015B8  24F3               	addwf	prodl,w,c
  3055  0015BA  6ED9               	movwf	fsr2l,c
  3056  0015BC  0E01               	movlw	high _serial
  3057  0015BE  20F4               	addwfc	prodh,w,c
  3058  0015C0  6EDA               	movwf	fsr2h,c
  3059  0015C2  C009  FFDF         	movff	serial_interrupt_handler@data,indf2
  3060                           
  3061                           ; BSR set to: 1
  3062  0015C6  2B80               	incf	(_serial+128)& (0+255),f,b
  3063                           
  3064                           ; BSR set to: 1
  3065                           ;serial.c: 71: serial.com_state = COM_STATE_COLLECT_DATA;
  3066  0015C8  0E01               	movlw	1
  3067  0015CA  6F82               	movwf	(_serial+130)& (0+255),b
  3068  0015CC                     
  3069                           ; BSR set to: 1
  3070                           ;serial.c: 72: if (serial.index >= 128)
  3071  0015CC  0E7F               	movlw	127
  3072  0015CE  6580               	cpfsgt	(_serial+128)& (0+255),b
  3073  0015D0  0C7F               	retlw	127
  3074  0015D2  EF2C  F00C         	goto	i2_reset_serial_com
  3075  0015D6                     i2l1489:
  3076                           
  3077                           ;serial.c: 81: if (data == 0x10)
  3078  0015D6  0E10               	movlw	16
  3079  0015D8  1809               	xorwf	serial_interrupt_handler@data,w,c
  3080  0015DA  E104               	bnz	i2l1497
  3081                           
  3082                           ;serial.c: 82: {
  3083                           ;serial.c: 83: serial.com_state = COM_STATE_FRAME_ESC;
  3084  0015DC  0E02               	movlw	2
  3085  0015DE                     L1:
  3086  0015DE  0101               	movlb	1	; () banked
  3087  0015E0  6F82               	movwf	(_serial+130)& (0+255),b
  3088                           
  3089                           ; BSR set to: 1
  3090                           ;serial.c: 84: return;
  3091  0015E2  0012               	return	
  3092  0015E4                     i2l1497:
  3093                           
  3094                           ;serial.c: 86: else if (data == 0x04)
  3095  0015E4  0E04               	movlw	4
  3096  0015E6  1809               	xorwf	serial_interrupt_handler@data,w,c
  3097  0015E8  E102               	bnz	i2l1505
  3098                           
  3099                           ;serial.c: 87: {
  3100                           ;serial.c: 88: serial.com_state = COM_STATE_PACKAGE_READY;
  3101  0015EA  0E04               	movlw	4
  3102  0015EC  D7F8               	goto	L1
  3103  0015EE                     i2l1505:
  3104                           
  3105                           ;serial.c: 91: else if (data == 0x01)
  3106  0015EE  0409               	decf	serial_interrupt_handler@data,w,c
  3107  0015F0  E104               	bnz	i2l1515
  3108                           
  3109                           ;serial.c: 92: {
  3110                           ;serial.c: 93: reset_serial_com();
  3111  0015F2  EC2C  F00C         	call	i2_reset_serial_com	;wreg free
  3112                           
  3113                           ;serial.c: 94: serial.com_state = COM_STATE_COLLECT_DATA;
  3114  0015F6  0E01               	movlw	1
  3115  0015F8  D7F2               	goto	L1
  3116  0015FA                     i2l1515:
  3117                           
  3118                           ;serial.c: 97: else
  3119                           ;serial.c: 98: serial.buffer[serial.index++] = data;
  3120  0015FA  0101               	movlb	1	; () banked
  3121  0015FC  5180               	movf	(_serial+128)& (0+255),w,b
  3122  0015FE  0D01               	mullw	1
  3123  001600  0E00               	movlw	low _serial
  3124  001602  24F3               	addwf	prodl,w,c
  3125  001604  6ED9               	movwf	fsr2l,c
  3126  001606  0E01               	movlw	high _serial
  3127  001608  20F4               	addwfc	prodh,w,c
  3128  00160A  6EDA               	movwf	fsr2h,c
  3129  00160C  C009  FFDF         	movff	serial_interrupt_handler@data,indf2
  3130                           
  3131                           ; BSR set to: 1
  3132  001610  2B80               	incf	(_serial+128)& (0+255),f,b
  3133  001612  D7DC               	goto	L3
  3134  001614                     i2l1527:
  3135  001614  0101               	movlb	1	; () banked
  3136  001616  5182               	movf	(_serial+130)& (0+255),w,b
  3137                           
  3138                           ; Switch size 1, requested type "space"
  3139                           ; Number of cases is 4, Range of values is 0 to 4
  3140                           ; switch strategies available:
  3141                           ; Name         Instructions Cycles
  3142                           ; simple_byte           13     7 (average)
  3143                           ;	Chosen strategy is simple_byte
  3144  001618  E0C4               	bz	i2l1473
  3145  00161A  0A01               	xorlw	1	; case 1
  3146  00161C  E0DC               	bz	i2l1489
  3147  00161E  0A03               	xorlw	3	; case 2
  3148  001620  E0C7               	bz	i2l1477
  3149  001622  0A06               	xorlw	6	; case 4
  3150  001624  0012               	return	
  3151  001626                     __end_of_serial_interrupt_handler:
  3152                           	opt stack 0
  3153                           pclatu	equ	0xFFB
  3154                           pclath	equ	0xFFA
  3155                           tblptru	equ	0xFF8
  3156                           tblptrh	equ	0xFF7
  3157                           tblptrl	equ	0xFF6
  3158                           tablat	equ	0xFF5
  3159                           prodh	equ	0xFF4
  3160                           prodl	equ	0xFF3
  3161                           intcon	equ	0xFF2
  3162                           indf0	equ	0xFEF
  3163                           postinc0	equ	0xFEE
  3164                           fsr0h	equ	0xFEA
  3165                           fsr0l	equ	0xFE9
  3166                           wreg	equ	0xFE8
  3167                           postdec1	equ	0xFE5
  3168                           plusw1	equ	0xFE3
  3169                           fsr1h	equ	0xFE2
  3170                           fsr1l	equ	0xFE1
  3171                           indf2	equ	0xFDF
  3172                           postinc2	equ	0xFDE
  3173                           postdec2	equ	0xFDD
  3174                           plusw2	equ	0xFDB
  3175                           fsr2h	equ	0xFDA
  3176                           fsr2l	equ	0xFD9
  3177                           status	equ	0xFD8
  3178                           
  3179 ;; *************** function i2_reset_serial_com *****************
  3180 ;; Defined at:
  3181 ;;		line 50 in file "C:/Users/F.ArGe/Desktop/deneme/node1.X/serial.c"
  3182 ;; Parameters:    Size  Location     Type
  3183 ;;		None
  3184 ;; Auto vars:     Size  Location     Type
  3185 ;;		None
  3186 ;; Return value:  Size  Location     Type
  3187 ;;                  1    wreg      void 
  3188 ;; Registers used:
  3189 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3190 ;; Tracked objects:
  3191 ;;		On entry : 0/0
  3192 ;;		On exit  : 0/0
  3193 ;;		Unchanged: 0/0
  3194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3199 ;;Total ram usage:        0 bytes
  3200 ;; Hardware stack levels used:    1
  3201 ;; Hardware stack levels required when called:    1
  3202 ;; This function calls:
  3203 ;;		i2_memset
  3204 ;; This function is called by:
  3205 ;;		_serial_interrupt_handler
  3206 ;; This function uses a non-reentrant model
  3207 ;;
  3208                           
  3209                           	psect	text20
  3210  001858                     __ptext20:
  3211                           	opt stack 0
  3212  001858                     i2_reset_serial_com:
  3213                           	opt stack 23
  3214                           
  3215                           ;serial.c: 52: memset(serial.buffer, 0x00, serial.index);
  3216                           
  3217                           ;incstack = 0
  3218  001858  0E00               	movlw	low _serial
  3219  00185A  6E01               	movwf	i2memset@p1,c
  3220  00185C  0E01               	movlw	high _serial
  3221  00185E  6E02               	movwf	i2memset@p1+1,c
  3222  001860  6A04               	clrf	i2memset@c+1,c
  3223  001862  6A03               	clrf	i2memset@c,c
  3224  001864  C180  F005         	movff	_serial+128,i2memset@n
  3225  001868  6A06               	clrf	i2memset@n+1,c
  3226  00186A  ECE3  F00B         	call	i2_memset	;wreg free
  3227                           
  3228                           ;serial.c: 53: serial.index = 0;
  3229  00186E  0101               	movlb	1	; () banked
  3230  001870  6B80               	clrf	(_serial+128)& (0+255),b
  3231                           
  3232                           ; BSR set to: 1
  3233                           ;serial.c: 54: serial.bcc = 0;
  3234  001872  6B81               	clrf	(_serial+129)& (0+255),b
  3235                           
  3236                           ; BSR set to: 1
  3237                           ;serial.c: 55: serial.com_state = COM_STATE_IDLE;
  3238  001874  6B82               	clrf	(_serial+130)& (0+255),b
  3239                           
  3240                           ; BSR set to: 1
  3241  001876  0C00               	retlw	0	;funcret
  3242  001878                     __end_ofi2_reset_serial_com:
  3243                           	opt stack 0
  3244                           pclatu	equ	0xFFB
  3245                           pclath	equ	0xFFA
  3246                           tblptru	equ	0xFF8
  3247                           tblptrh	equ	0xFF7
  3248                           tblptrl	equ	0xFF6
  3249                           tablat	equ	0xFF5
  3250                           prodh	equ	0xFF4
  3251                           prodl	equ	0xFF3
  3252                           intcon	equ	0xFF2
  3253                           indf0	equ	0xFEF
  3254                           postinc0	equ	0xFEE
  3255                           fsr0h	equ	0xFEA
  3256                           fsr0l	equ	0xFE9
  3257                           wreg	equ	0xFE8
  3258                           postdec1	equ	0xFE5
  3259                           plusw1	equ	0xFE3
  3260                           fsr1h	equ	0xFE2
  3261                           fsr1l	equ	0xFE1
  3262                           indf2	equ	0xFDF
  3263                           postinc2	equ	0xFDE
  3264                           postdec2	equ	0xFDD
  3265                           plusw2	equ	0xFDB
  3266                           fsr2h	equ	0xFDA
  3267                           fsr2l	equ	0xFD9
  3268                           status	equ	0xFD8
  3269                           
  3270 ;; *************** function i2_memset *****************
  3271 ;; Defined at:
  3272 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\memset.c"
  3273 ;; Parameters:    Size  Location     Type
  3274 ;;  p1              2    0[COMRAM] PTR void 
  3275 ;;		 -> serial(131), 
  3276 ;;  c               2    2[COMRAM] int 
  3277 ;;  n               2    4[COMRAM] unsigned int 
  3278 ;; Auto vars:     Size  Location     Type
  3279 ;;  memset          2    6[COMRAM] PTR unsigned char 
  3280 ;;		 -> serial(131), 
  3281 ;; Return value:  Size  Location     Type
  3282 ;;                  2    0[COMRAM] PTR void 
  3283 ;; Registers used:
  3284 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3285 ;; Tracked objects:
  3286 ;;		On entry : 0/0
  3287 ;;		On exit  : 0/0
  3288 ;;		Unchanged: 0/0
  3289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3290 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3291 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3293 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3294 ;;Total ram usage:        8 bytes
  3295 ;; Hardware stack levels used:    1
  3296 ;; This function calls:
  3297 ;;		Nothing
  3298 ;; This function is called by:
  3299 ;;		i2_reset_serial_com
  3300 ;; This function uses a non-reentrant model
  3301 ;;
  3302                           
  3303                           	psect	text21
  3304  0017C6                     __ptext21:
  3305                           	opt stack 0
  3306  0017C6                     i2_memset:
  3307                           	opt stack 23
  3308                           
  3309                           ; BSR set to: 1
  3310                           ;incstack = 0
  3311  0017C6  C001  F007         	movff	i2memset@p1,i2memset@p
  3312  0017CA  C002  F008         	movff	i2memset@p1+1,i2memset@p+1
  3313  0017CE  D008               	goto	i2l1355
  3314  0017D0                     i2l1351:
  3315  0017D0  C007  FFD9         	movff	i2memset@p,fsr2l
  3316  0017D4  C008  FFDA         	movff	i2memset@p+1,fsr2h
  3317  0017D8  C003  FFDF         	movff	i2memset@c,indf2
  3318  0017DC  4A07               	infsnz	i2memset@p,f,c
  3319  0017DE  2A08               	incf	i2memset@p+1,f,c
  3320  0017E0                     i2l1355:
  3321  0017E0  0605               	decf	i2memset@n,f,c
  3322  0017E2  A0D8               	btfss	status,0,c
  3323  0017E4  0606               	decf	i2memset@n+1,f,c
  3324  0017E6  2805               	incf	i2memset@n,w,c
  3325  0017E8  E1F3               	bnz	i2l1351
  3326  0017EA  2806               	incf	i2memset@n+1,w,c
  3327  0017EC  E1F1               	bnz	i2l1351
  3328  0017EE  0012               	return	
  3329  0017F0                     __end_ofi2_memset:
  3330                           	opt stack 0
  3331                           pclatu	equ	0xFFB
  3332                           pclath	equ	0xFFA
  3333                           tblptru	equ	0xFF8
  3334                           tblptrh	equ	0xFF7
  3335                           tblptrl	equ	0xFF6
  3336                           tablat	equ	0xFF5
  3337                           prodh	equ	0xFF4
  3338                           prodl	equ	0xFF3
  3339                           intcon	equ	0xFF2
  3340                           indf0	equ	0xFEF
  3341                           postinc0	equ	0xFEE
  3342                           fsr0h	equ	0xFEA
  3343                           fsr0l	equ	0xFE9
  3344                           wreg	equ	0xFE8
  3345                           postdec1	equ	0xFE5
  3346                           plusw1	equ	0xFE3
  3347                           fsr1h	equ	0xFE2
  3348                           fsr1l	equ	0xFE1
  3349                           indf2	equ	0xFDF
  3350                           postinc2	equ	0xFDE
  3351                           postdec2	equ	0xFDD
  3352                           plusw2	equ	0xFDB
  3353                           fsr2h	equ	0xFDA
  3354                           fsr2l	equ	0xFD9
  3355                           status	equ	0xFD8
  3356                           pclatu	equ	0xFFB
  3357                           pclath	equ	0xFFA
  3358                           tblptru	equ	0xFF8
  3359                           tblptrh	equ	0xFF7
  3360                           tblptrl	equ	0xFF6
  3361                           tablat	equ	0xFF5
  3362                           prodh	equ	0xFF4
  3363                           prodl	equ	0xFF3
  3364                           intcon	equ	0xFF2
  3365                           indf0	equ	0xFEF
  3366                           postinc0	equ	0xFEE
  3367                           fsr0h	equ	0xFEA
  3368                           fsr0l	equ	0xFE9
  3369                           wreg	equ	0xFE8
  3370                           postdec1	equ	0xFE5
  3371                           plusw1	equ	0xFE3
  3372                           fsr1h	equ	0xFE2
  3373                           fsr1l	equ	0xFE1
  3374                           indf2	equ	0xFDF
  3375                           postinc2	equ	0xFDE
  3376                           postdec2	equ	0xFDD
  3377                           plusw2	equ	0xFDB
  3378                           fsr2h	equ	0xFDA
  3379                           fsr2l	equ	0xFD9
  3380                           status	equ	0xFD8
  3381                           
  3382                           	psect	rparam
  3383  0000                     pclatu	equ	0xFFB
  3384                           pclath	equ	0xFFA
  3385                           tblptru	equ	0xFF8
  3386                           tblptrh	equ	0xFF7
  3387                           tblptrl	equ	0xFF6
  3388                           tablat	equ	0xFF5
  3389                           prodh	equ	0xFF4
  3390                           prodl	equ	0xFF3
  3391                           intcon	equ	0xFF2
  3392                           indf0	equ	0xFEF
  3393                           postinc0	equ	0xFEE
  3394                           fsr0h	equ	0xFEA
  3395                           fsr0l	equ	0xFE9
  3396                           wreg	equ	0xFE8
  3397                           postdec1	equ	0xFE5
  3398                           plusw1	equ	0xFE3
  3399                           fsr1h	equ	0xFE2
  3400                           fsr1l	equ	0xFE1
  3401                           indf2	equ	0xFDF
  3402                           postinc2	equ	0xFDE
  3403                           postdec2	equ	0xFDD
  3404                           plusw2	equ	0xFDB
  3405                           fsr2h	equ	0xFDA
  3406                           fsr2l	equ	0xFD9
  3407                           status	equ	0xFD8
  3408                           
  3409                           	psect	temp
  3410  000046                     btemp:
  3411                           	opt stack 0
  3412  000046                     	ds	1
  3413  0000                     int$flags	set	btemp
  3414                           pclatu	equ	0xFFB
  3415                           pclath	equ	0xFFA
  3416                           tblptru	equ	0xFF8
  3417                           tblptrh	equ	0xFF7
  3418                           tblptrl	equ	0xFF6
  3419                           tablat	equ	0xFF5
  3420                           prodh	equ	0xFF4
  3421                           prodl	equ	0xFF3
  3422                           intcon	equ	0xFF2
  3423                           indf0	equ	0xFEF
  3424                           postinc0	equ	0xFEE
  3425                           fsr0h	equ	0xFEA
  3426                           fsr0l	equ	0xFE9
  3427                           wreg	equ	0xFE8
  3428                           postdec1	equ	0xFE5
  3429                           plusw1	equ	0xFE3
  3430                           fsr1h	equ	0xFE2
  3431                           fsr1l	equ	0xFE1
  3432                           indf2	equ	0xFDF
  3433                           postinc2	equ	0xFDE
  3434                           postdec2	equ	0xFDD
  3435                           plusw2	equ	0xFDB
  3436                           fsr2h	equ	0xFDA
  3437                           fsr2l	equ	0xFD9
  3438                           status	equ	0xFD8


Data Sizes:
    Strings     157
    Constant    50
    Data        38
    BSS         131
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     69      69
    BANK0           160     31      69
    BANK1           256      0     131
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 131
		 -> serial(BANK1[131]), 

    memset@p	PTR unsigned char  size(2) Largest target is 131
		 -> serial(BANK1[131]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 31
		 -> STR_8(CODE[11]), STR_7(CODE[10]), STR_6(CODE[26]), STR_5(CODE[31]), 
		 -> STR_4(CODE[7]), STR_3(CODE[8]), STR_2(CODE[15]), STR_1(CODE[25]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 131
		 -> STR_9(CODE[7]), serial.buffer(BANK1[128]), serial(BANK1[131]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    serial_send_package@buff	PTR const unsigned char  size(2) Largest target is 38
		 -> send_info@buff(COMRAM[38]), 

    sp__memset	PTR void  size(2) Largest target is 131
		 -> serial(BANK1[131]), 

    my_memcmp@Ptr2	PTR const void  size(2) Largest target is 9
		 -> serial_rx_process@get_info(BANK0[9]), serial_rx_process@led1_off(BANK0[9]), serial_rx_process@led1_on(BANK0[8]), 

    my_memcmp@p2	PTR unsigned char  size(2) Largest target is 9
		 -> serial_rx_process@get_info(BANK0[9]), serial_rx_process@led1_off(BANK0[9]), serial_rx_process@led1_on(BANK0[8]), 

    my_memcmp@Ptr1	PTR const void  size(2) Largest target is 131
		 -> serial.buffer(BANK1[128]), serial(BANK1[131]), 

    my_memcmp@p1	PTR unsigned char  size(2) Largest target is 131
		 -> serial.buffer(BANK1[128]), serial(BANK1[131]), 


Critical Paths under _main in COMRAM

    _usart_init->___lldiv
    _serial_rx_process->_send_info
    _send_info->_serial_send_package
    _serial_send_package->_serial_send_data
    _reset_serial_com->_memset
    _check_package_bcc->_printf
    _LED1_ON->_printf
    _LED1_OFF->_printf
    _printf->___lwdiv

Critical Paths under _ISR in COMRAM

    _ISR->_serial_interrupt_handler
    i2_reset_serial_com->i2_memset

Critical Paths under _main in BANK0

    _main->_serial_rx_process

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    8562
                             _printf
                  _serial_rx_process
                         _usart_init
                     _usart_isr_init
 ---------------------------------------------------------------------------------
 (1) _usart_isr_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _usart_init                                          12    10      2     465
                                             37 COMRAM    12    10      2
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _serial_rx_process                                   31    31      0    6840
                                              0 BANK0     31    31      0
                           _LED1_OFF
                            _LED1_ON
                  _check_package_bcc
                   _is_package_ready
                          _my_memcmp
                             _printf
                   _reset_serial_com
                          _send_info
 ---------------------------------------------------------------------------------
 (2) _send_info                                           38    38      0     535
                                             31 COMRAM    38    38      0
                _serial_send_package
 ---------------------------------------------------------------------------------
 (3) _serial_send_package                                  6     3      3     507
                                             25 COMRAM     6     3      3
                   _serial_send_data
 ---------------------------------------------------------------------------------
 (4) _serial_send_data                                     1     1      0      22
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _reset_serial_com                                     0     0      0     288
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     288
                                             24 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _my_memcmp                                           12     6      6     736
                                             24 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) _is_package_ready                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _check_package_bcc                                    9     9      0    1438
                                             47 COMRAM     9     9      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _LED1_ON                                              0     0      0    1257
                             _printf
 ---------------------------------------------------------------------------------
 (2) _LED1_OFF                                             0     0      0    1257
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              22    16      6    1257
                                             31 COMRAM    16    10      6
                            ___lwdiv
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      22
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     290
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 15    15      0     329
                                              9 COMRAM    15    15      0
           _serial_interrupt_handler
 ---------------------------------------------------------------------------------
 (6) _serial_interrupt_handler                             1     1      0     306
                                              8 COMRAM     1     1      0
                 i2_reset_serial_com
 ---------------------------------------------------------------------------------
 (7) i2_reset_serial_com                                   0     0      0     174
                           i2_memset
 ---------------------------------------------------------------------------------
 (8) i2_memset                                             8     2      6     174
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _printf
     ___lwdiv
     _putch
   _serial_rx_process
     _LED1_OFF
       _printf
         ___lwdiv
         _putch
     _LED1_ON
       _printf
         ___lwdiv
         _putch
     _check_package_bcc
       _printf
         ___lwdiv
         _putch
     _is_package_ready
     _my_memcmp
     _printf
       ___lwdiv
       _putch
     _reset_serial_com
       _memset
     _send_info
       _serial_send_package
         _serial_send_data
   _usart_init
     ___lldiv
   _usart_isr_init

 _ISR (ROOT)
   _serial_interrupt_handler
     i2_reset_serial_com
       i2_memset

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      83       7       51.2%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1F      45       5       43.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     45      45       1       73.4%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10D      12        0.0%
DATA                 0      0     10D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Wed Feb 01 11:31:06 2017

         _serial_interrupt_handler 159E                                  _a 1001  
                               l99 189A                       __CFG_CP0$OFF 000000  
                     __CFG_CP1$OFF 000000                       __CFG_CP2$OFF 000000  
                     __CFG_CP3$OFF 000000                     send_info@F7963 0060  
                              l217 11D4                                l174 1584  
                              l175 158A                                l179 18B2  
                              l626 172C                                l573 168A  
                     __CFG_CPB$OFF 000000                       __CFG_CPD$OFF 000000  
                              u620 1138                                _ISR 0008  
                              u630 1162                                u627 112E  
                              u637 1158                                u790 16E2  
                              u871 1820                                u980 1578  
                              u990 1266                                u975 1532  
                              prod 000FF3                                wreg 000FE8  
                       _TXSTA1bits 000FAC          __end_of_serial_rx_process 137E  
                     __CFG_FOSC$XT 000000                    __end_of_LED1_ON 1888  
                     __CFG_LVP$OFF 000000                               ?_ISR 0001  
                             ISR@i 0018                               l1303 1230  
                             l1241 1708                               l1305 1238  
                             l1401 140E                               l1313 17B6  
                             l1321 1472                               l1331 14BC  
                             l1237 16FC                               l1261 10EE  
                             l1413 1458                               l1309 17A6  
                             l1239 1704                               l1255 10DC  
                             l1343 1502                               l1327 14B4  
                             l1335 14E8                               l1249 1722  
                             l1273 1140                               l1345 1508  
                             l1337 14F0                               l1259 10EA  
                             l1363 16B0                               l1451 164E  
                             l1285 11A6                               l1269 1116  
                             l1277 1168                               l1373 16E8  
                             l1541 12B2                               l1447 163E  
                             l1297 11DA                               l1393 13C6  
                             l1369 16D4                               l1449 164A  
                             l1395 13CA                               l1387 1384  
                             l1547 12BE                               l1459 167C  
                             l1573 137A                               l1565 1358  
                             l1557 1332                               l1399 13E0  
                             l1593 1796                               STR_1 106C  
                             STR_2 1096                               STR_3 10BA  
                             STR_4 10C9                               STR_5 1033  
                             STR_6 1052                               STR_7 10B0  
                             STR_8 10A5                               STR_9 10C2  
                             u1000 1282                               u1010 129E  
                             _RCIF 007CF5                               _TXIF 007CF4  
      __end_of_serial_send_package 1514                               _main 176C  
                             fsr0h 000FEA                               fsr1h 000FE2  
                             indf0 000FEF                               fsr0l 000FE9  
                             fsr2h 000FDA                               fsr1l 000FE1  
                             indf2 000FDF                               fsr2l 000FD9  
                             btemp 0046                      __CFG_BORV$190 000000  
                             pclat 000FFA                               prodh 000FF4  
                             prodl 000FF3                               start 0090  
                    __CFG_IESO$OFF 000000           serial_rx_process@led1_on 009D  
         __end_of_reset_serial_com 1858                   __end_of_LED1_OFF 1898  
                     ___param_bank 000010               serial_send_data@data 0019  
                            ??_ISR 000A                       _BAUDCON1bits 000FB8  
                            ?_main 0001                              STR_10 1085  
                  __end_of___lldiv 169C                              _LATB0 007C50  
                            _LATB1 007C51                              _RC1IF 007CF5  
                  __end_of___lwdiv 1736                              _RCREG 000FAE  
                            _SPBRG 000FAF                              _TRISB 000F93  
                            _TRISC 000F94                              _TXREG 000FAD  
                    __CFG_WRT0$OFF 000000                      __CFG_WRT1$OFF 000000  
                    __CFG_WRT2$OFF 000000                      __CFG_WRT3$OFF 000000  
                   __CFG_EBTR0$OFF 000000                     __CFG_FCMEN$OFF 000000  
                   __CFG_EBTR1$OFF 000000                   _is_package_ready 18A4  
                   __CFG_EBTR2$OFF 000000                     __CFG_EBTR3$OFF 000000  
                    __CFG_WRTB$OFF 000000                      __CFG_WRTC$OFF 000000  
                    __CFG_WRTD$OFF 000000                     __CFG_EBTRB$OFF 000000  
                       i2memset@p1 0001                 __CFG_MCLRE$EXTMCLR 000000  
                            _putch 18B0                              tablat 000FF5  
             serial_send_package@i 001F               check_package_bcc@bcc 0037  
                            plusw1 000FE3                              plusw2 000FDB  
                            status 000FD8                   __end_ofi2_memset 17F0  
                  __initialization 1736                       __end_of_main 179C  
                           ??_main 0046                          ??_LED1_ON 0030  
                    __activetblptr 000003         __size_of_serial_rx_process 012A  
                           ?_putch 0001                             _ANSELB 000F39  
                           _ANSELC 000F3A                             i2l1351 17D0  
                           i2l1505 15EE                             i2l1355 17E0  
                           i2l1515 15FA                             i2l1527 1614  
                           i2l1473 15A2                             i2l1477 15B0  
                           i2l1581 0052                     __CFG_WDTEN$OFF 000000  
                           i2l1497 15E4                             i2l1489 15D6  
                           _RCREG1 000FAE                 i2_reset_serial_com 1858  
                           _TX1REG 000FAD                             _TRISC6 007CA6  
                           _TRISC7 007CA7           __end_of_serial_send_data 18A4  
                   __CFG_XINST$OFF 000000                ?i2_reset_serial_com 0001  
                   __CFG_STVREN$ON 000000                          ??___lldiv 0021  
                        ??___lwdiv 001D                             _memset 179C  
                           clear_0 173C                             _serial 0100  
                           _printf 10D2            __size_of_usart_isr_init 000A  
                _check_package_bcc 137E                 ?_check_package_bcc 0001  
             ??i2_reset_serial_com 0009                       __mediumconst 0000  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8                          ?_LED1_OFF 0001  
                  __CFG_HFOFST$OFF 000000                ??_check_package_bcc 0030  
                       __accesstop 0060            __end_of__initialization 1762  
       ??_serial_interrupt_handler 0009                    __CFG_PBADEN$OFF 000000  
                    ___rparam_used 000001                     __pcstackCOMRAM 0001  
                     __pidataBANK0 17F0                      __end_of_putch 18BC  
        __end_of_check_package_bcc 1466                          ?i2_memset 0001  
                       ??_LED1_OFF 0030                            ??_putch 0019  
                       __pbssBANK1 0100                    __CFG_PLLCFG$OFF 000000  
               __CFG_CCP2MX$PORTB3 000000           __end_of_is_package_ready 18B0  
                ?_reset_serial_com 0001                 __CFG_CCP3MX$PORTB5 000000  
               ??_reset_serial_com 0021                 __size_of_send_info 0022  
                          ?_memset 0019                            ?_printf 0020  
               __size_of_my_memcmp 0050                            _LED1_ON 1878  
                       ??i2_memset 0007                            _SPBRGH1 000FB0  
                  __CFG_PWRTEN$OFF 000000                            __Hparam 0000  
                          __Lparam 0000       __size_of_serial_send_package 00AE  
                          ___lldiv 1626                            ___lwdiv 16EC  
                     __psmallconst 1000         __size_of_check_package_bcc 00E8  
                          __pcinit 1736                     _usart_isr_init 18BC  
                  __size_of_memset 002A                            __ramtop 1000  
                          __ptext0 176C                            __ptext1 18BC  
                          __ptext2 1514                            __ptext3 1626  
                          __ptext4 1254                            __ptext5 1816  
                          __ptext6 1466                            __ptext7 1898  
                          __ptext8 1838                            __ptext9 179C  
                  __size_of_printf 0182                       __size_of_ISR 0088  
                __end_of_hexpowers 102B                        my_memcmp@p1 0020  
                      my_memcmp@p2 0022               end_of_initialization 1762  
                __end_of_send_info 1838   __end_of_serial_interrupt_handler 1626  
                          memset@c 001B                            memset@n 001D  
                          memset@p 001F                  __end_of_my_memcmp 16EC  
                ?_serial_send_data 0001             serial_send_package@bcc 001E  
                  ___lldiv@divisor 001D                    ___lldiv@counter 0025  
               usart_init@BAUDRATE 0026                 ??_serial_send_data 0019  
                        _RCSTAbits 000FAB                            printf@c 002F  
                          printf@f 0020                            postdec1 000FE5  
                          postdec2 000FDD                            postinc0 000FEE  
                          postinc2 000FDE             __end_of_usart_isr_init 18C6  
           serial_rx_process@F7954 102B             serial_rx_process@F7956 1011  
           serial_rx_process@F7958 101A                     my_memcmp@Count 001D  
                __size_of_LED1_OFF 0010                      send_info@buff 0020  
                        _TXSTAbits 000FAC                         _usart_init 1514  
               check_package_bcc@i 0038                    ?_usart_isr_init 0001  
                        i2memset@c 0003                          i2memset@n 0005  
                        i2memset@p 0007                     __end_of_memset 17C6  
                   __end_of_printf 1254                start_initialization 1736  
                      __end_of_ISR 0090        __size_ofi2_reset_serial_com 0020  
                __size_ofi2_memset 002A                  ?_is_package_ready 0001  
                      __pdataBANK0 0060                 ??_is_package_ready 0019  
                         ??_memset 001F  __size_of_serial_interrupt_handler 0088  
        ?_serial_interrupt_handler 0001                           ??_printf 0026  
                         ?_LED1_ON 0001                      __pcstackBANK0 0086  
        __size_of_reset_serial_com 0020                _serial_send_package 1466  
                        __end_of_a 1011                        ?_usart_init 0026  
                 ___lwdiv@dividend 0019               ?_serial_send_package 001A  
                        __pintcode 0008                           ?___lldiv 0019  
                         ?___lwdiv 0019                   __CFG_PRICLKEN$ON 000000  
                      __smallconst 1000                          _hexpowers 1023  
                 ___lwdiv@quotient 001D                           _LED1_OFF 1888  
                   __size_of_putch 000C          serial_rx_process@led1_off 008B  
                       my_memcmp@v 0024                           _PIE1bits 000F9D  
                        _send_info 1816          serial_rx_process@get_info 0094  
            ??_serial_send_package 001D                          _my_memcmp 169C  
                         _RCONbits 000FD0                   __CFG_WDTPS$32768 000000  
                usart_init@DIVIDER 002E          __size_of_serial_send_data 000C  
                    my_memcmp@Ptr1 0019                      my_memcmp@Ptr2 001B  
                       printf@flag 0026                   __size_of_LED1_ON 0010  
                       printf@prec 002A                __size_of_usart_init 008A  
                         i2_memset 17C6                          copy_data0 1756  
                       ?_send_info 0001                   ??_usart_isr_init 0019  
                         __Hrparam 0000                           __Lrparam 0000  
                       ?_my_memcmp 0019                 __CFG_BOREN$SBORDIS 000000  
                __CFG_P2BMX$PORTD2 000000     __end_ofserial_rx_process@F7954 1033  
   __end_ofserial_rx_process@F7956 101A     __end_ofserial_rx_process@F7958 1023  
                 __size_of___lldiv 0076                   __size_of___lwdiv 004A  
     serial_interrupt_handler@data 0009                   _reset_serial_com 1838  
                  ___lwdiv@divisor 001B                    ___lwdiv@counter 001F  
                         __ptext10 169C                           __ptext11 18A4  
                         __ptext20 1858                           __ptext12 137E  
                         __ptext21 17C6                           __ptext13 1878  
                         __ptext14 1888                           __ptext15 10D2  
                         __ptext16 18B0                           __ptext17 16EC  
                         __ptext19 159E                      __size_of_main 0030  
                         int$flags 0046                          printf@idx 0027  
                        printf@val 0028         __end_ofi2_reset_serial_com 1878  
                        putch@byte 0019                         _INTCONbits 000FF2  
        __size_of_is_package_ready 000C                           memset@p1 0019  
                         intlevel2 0000            serial_send_package@buff 001A  
                 ___lldiv@dividend 0019            serial_send_package@size 001C  
                     ??_usart_init 0028                        ??_send_info 0020  
                      ??_my_memcmp 001F                           printf@ap 002B  
                         printf@cp 002D                   _serial_send_data 1898  
                 ___lldiv@quotient 0021                  __CFG_T3CMX$PORTC0 000000  
               __end_of_usart_init 159E                  _serial_rx_process 1254  
               ?_serial_rx_process 0001                ??_serial_rx_process 0086  
